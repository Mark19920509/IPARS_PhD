C  XSTDOUT.F - PRINT COMPOSITIONAL MODEL STANDARD OUTPUT

C  ROUTINES IN THIS MODULE:

C  SUBROUTINE XSTDOUTS ()
C  SUBROUTINE XSTDOUTA ()

C  CODE HISTORY:        
C    THE IPARS TEAM     04/02/1997   FRAMEWORK
C    RICK DEAN          06/25/2001   INITIAL VERSION
C    SUNIL G. THOMAS    09/01/2007   THERMAL, DIFF-DISP AND CO2 APPS,
C                      -09/31/2009   2-PH HYSTERESIS, EVMFEM, ETC.
C    GURPREET SINGH     09/15/2015   AQUEOUS COMPONENTS
C*********************************************************************
      SUBROUTINE XSTDOUTS ()
C*********************************************************************
      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
      INCLUDE 'xmodel.h'
      INCLUDE 'xbaldat.h'
      INCLUDE 'unitsex.h'
      INCLUDE 'xparam.h'
      INCLUDE 'xcompwel.h'
      REAL*8 KVAL($MXCOMP,$MXSTAGE),X,CTOTAL($MXCOMP+1),CO2TGMOL(1),
     &       CO2TLMOL(1),CO2TTMOL,CO2TFRGMOL(1),CO2TTRGMOL(1),
     &       CO2TDSSMOL(1),CO2FRG,CO2TRG,CO2DSS,CONV_PH($MXCOMP+1,$MXPHASE),
     &       CONV_IC($MXCOMP+1,$MXPHASE)
      CHARACTER*6 PHNAME

      DO IC = 1,NC
         CTOTAL(IC) = CURRENT(IC)
      END DO
$MANY      CALL SUMIT(NC,CTOTAL)

      IF(OUT_CO2MOL) THEN
         CALL XCO2INPL()
         CO2TGMOL(1)=CO2GMOL
         CO2TLMOL(1)=CO2LMOL
$MANY      CALL SUMIT(1,CO2TGMOL)
$MANY      CALL SUMIT(1,CO2TLMOL)
      ENDIF
      
      IF(OUT_CO2DIST) THEN
         CALL XCO2DIST()
         CO2TFRGMOL(1)=CO2FRGMOL
         CO2TTRGMOL(1)=CO2TRGMOL
         CO2TDSSMOL(1)=CO2DSSMOL
$MANY      CALL SUMIT(1,CO2TFRGMOL)
$MANY      CALL SUMIT(1,CO2TTRGMOL)
$MANY      CALL SUMIT(1,CO2TDSSMOL)
         CO2TTMOL=CO2TFRGMOL(1)+CO2TTRGMOL(1)+CO2TDSSMOL(1)
         IF(CO2TTMOL > TEN_M10) THEN
            CO2FRG=CO2TFRGMOL(1)/CO2TTMOL
            CO2TRG=CO2TTRGMOL(1)/CO2TTMOL
            CO2DSS=CO2TDSSMOL(1)/CO2TTMOL
         ELSE
            CO2FRG=ZERO
            CO2TRG=ZERO
            CO2DSS=ZERO
         ENDIF
      ENDIF
      
      IF(.NOT.LEVELC) RETURN
      DO IC = 1,NC
         IF(CTOTAL(IC) < TEN_M10) CTOTAL(IC) = ZERO
      END DO
C-------print total components in place
      WRITE(NFOUT,'(/,A,/)') ' TOTAL COMPONENTS IN PLACE'
      DO IC = 1,NC
         WRITE(NFOUT,'(20X,A,T40,G17.10,A)') CMPNAM(IC),
     &               CVMMASS*CTOTAL(IC),EXTMASS
      END DO

C     set up k-values for separator stages
      N = NSEPSURF
      IF(ISEPTYP(N) == 0) THEN
         I = IFLINIT
         CALL SET_KVAL(NC,NHC,NPH,NCINPH,ICINPH,I,ISEPTAB(1,N), 
     &                 NFOUT,KVAL,CTOTAL,PSEP(1,N),NSTAGE(N),
     &                 TSEP(1,N))
      ELSE
         DO I = 1,NSTAGE(N)
            DO IC = 1,NHC
               KVAL(IC,I) = SEPKVAL(IC,I,N)
            END DO
         END DO
      ENDIF

C     set up surface conversion factors
      CALL CALC_CONVERT_PH(NC,NPH,NHC,CTOTAL,PSEP(1,N),NSTAGE(N), 
     &                     KVAL,ISEPTAB(1,N),TSEP(1,N),CONV_PH,
     &                     CONV_IC,PHNAM)
 
C     determine phase rates
      DO IPH = 1,NPH
         X = ZERO
         DO IC = 1,NC
            X= X + CONV_PH(IC,IPH)*CTOTAL(IC)
         END DO
         FIP(IPH) = X
      END DO


C-------print total phases in place and average pressure
      WRITE(NFOUT,'(/,A,/)') ' SURFACE PHASE VOLUMES IN PLACE'
      WRITE(NFOUT,'(20X,A,T40,G17.10,A)') PHNAM(1),
     &                                    FIP(1)*CVMPLL,EXTPLL
      IF(NPH > 1) THEN
         IF(NPH > 2 .OR. PHNAM(2) == 'OIL') THEN
            WRITE(NFOUT,'(20X,A,T40,G17.10,A)') PHNAM(2),
     &                                          FIP(2)*CVMPLL,EXTPLL
         ELSE
            WRITE(NFOUT,'(20X,A,T40,G17.10,A)') PHNAM(2),
     &                                          FIP(2)*CVMPLG,EXTPLG
         ENDIF
      ENDIF

      IF(NPH > 2) THEN
         DO I = MIN(NPH,3),NPH
            WRITE(NFOUT,'(20X,A,T40,G17.10,A)') PHNAM(I),
     &                                          FIP(I)*CVMPLG,EXTPLG
         END DO
      ENDIF

C-------print total CO2 moles in place in each phase
      IF(OUT_CO2MOL) THEN
         DO IC=1,NC 
            IF(CMPNAM(IC)(1:3) /= 'CO2') CYCLE
            WRITE(NFOUT,'(/,A,/)') ' TOTAL GAS MOLES IN PLACE'
            WRITE(NFOUT,'(20X,A,T40,G17.10,A)') CMPNAM(IC),
     &            CVMMASS*CO2TGMOL(1),EXTMASS
            WRITE(NFOUT,'(/,A,/)') ' TOTAL OIL MOLES IN PLACE'
            WRITE(NFOUT,'(20X,A,T40,G17.10,A)') CMPNAM(IC),
     &            CVMMASS*CO2TLMOL(1),EXTMASS
         ENDDO
      ENDIF

C-------print distribution of CO2 as fraction of trapped, free and 
C       dissolved amounts
      IF(OUT_CO2DIST) THEN
         DO IC=1,NC 
            IF(CMPNAM(IC)(1:3) /= 'CO2') CYCLE
            WRITE(NFOUT,'(/,A,/)') ' FRACTION FREE GAS IN PLACE'
            WRITE(NFOUT,'(20X,A,T40,G17.10)') CMPNAM(IC),CO2FRG
            WRITE(NFOUT,'(/,A,/)') ' FRACTION TRAPPED GAS IN PLACE'
            WRITE(NFOUT,'(20X,A,T40,G17.10)') CMPNAM(IC),CO2TRG
            WRITE(NFOUT,'(/,A,/)') ' FRACTION DISS. COMPNT IN PLACE'
            WRITE(NFOUT,'(20X,A,T40,G17.10)') CMPNAM(IC),CO2DSS
         ENDDO
      ENDIF

      WRITE(NFOUT,'(/,A,/)') ' OIL/GAS RECOVERY AND AVG PRESSURE'
      IF(NPH > 1) THEN
         DO I = MIN(NPH,2),NPH
            IF(IFIP(I) > ZERO) THEN
               X = TEN_P2*(IFIP(I)-FIP(I))/IFIP(I)
            ELSE
               X = ZERO
            ENDIF
            PHNAME = PHNAM(I)
            WRITE(NFOUT,'(20X,2A,T40,G15.6,A)') PHNAME,' RECOVERY',
     &                                          X,'%'
         END DO
      ENDIF
      WRITE(NFOUT,'(20X,A,T40,G15.6,A)') 'PAVG',
     &                                     PAVG*CVMPRES,EXTPRES
      END

C*********************************************************************
      SUBROUTINE XSTDOUTA ()
C*********************************************************************

C  Prints array compositional model standard output

C*********************************************************************
      USE xgendat
      IMPLICIT NONE
$POWER        INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
      INCLUDE 'xarydat.h'
      INCLUDE 'xmodel.h'
      INCLUDE 'xparam.h'
      CHARACTER*8 CNAME, PHNAME
      INTEGER IPNT(10),I,IPH
      EXTERNAL XMOLDEN,XMOLFRAC,XTOLMOLE,XTMOLFRAC,XCR,XVISC,XRELPERM,
     &         SETARYR8N

C-------print rock compressibility array
      IF(OUT_COMPR) THEN
         TITU='ROCK COMPRESSIBILITY FOR FAULT BLOCK'
         IPNT(1)=2
         IPNT(2)=N_CR
         IPNT(3)=N_POR
         IPNT(4)=N_DELC
         CALL CALLWORK(XCR,IPNT)
         CALL GEAOUT(N_DELC,1,1)
      ENDIF

C-------print reference pressure array
      IF(OUT_REFP) THEN
         TITU='REFERENCE PRESSURE FOR FAULT BLOCK'
         CALL GEAOUT(N_REFPRES,1,1)
      ENDIF

C-------print pore volumes
      IF(OUT_PV) THEN
         TITU='PORE VOLUME FOR FAULT BLOCK'
         CALL GEAOUT(N_PV,1,1)
      ENDIF

C-------print temperatures
      IF(OUT_TEMPR) THEN
         TITU='TEMPERATURE FOR FAULT BLOCK'
         CALL GEAOUT(N_TEMPR,1,1)
      ENDIF

C-------print 1d temperatures and related quantities upon request
      IF(OUT_1DTEMPR) THEN
         CALL X1DTMPROUT()
         IF(OUT_1DXCP) CALL X1DXCPOUT()
         IF(OUT_1DMDEN) CALL X1DPHDENOUT()
         IF(OUT_1DSAT) CALL X1DPHSATOUT()
         IF(OUT_1DVEL) CALL X1DPHVELOUT()
      ENDIF

C-------print pressures
      IF(OUT_PRES) THEN
         TITU='PRESSURE FOR FAULT BLOCK'
         CALL GEAOUT(N_PRES,1,1)
      ENDIF

C-------print saturations
      IF(OUT_SAT) THEN
         DO I=1,NPH
            CNAME=PHNAM(I)
            WRITE(TITU,'(2A)') CNAME,' SATURATION FOR FAULT BLOCK'
            CALL GEAOUT(N_SAT,I,1)
         END DO
      ENDIF

C-------print capillary pressures
      IF(OUT_PC) THEN
         DO I=1,NPH
            IF(I == IREFPRES) CYCLE
            CNAME=PHNAM(I)
            WRITE(TITU,'(3A)') CNAME,' CAPILLARY PRESSURE FOR',
     &                         ' FAULT BLOCK'
            CALL GEAOUT(N_PC,I,1)
         END DO
      ENDIF

C-------print mobilities
      IF(OUT_MOB) THEN
         DO I=1,NPH
            CNAME=PHNAM(I)
            WRITE(TITU,'(2A)') CNAME,' MOBILITY FOR FAULT BLOCK'
            CALL GEAOUT(N_MOB,I,1)
         END DO
      ENDIF

C-------print water mass densities
      IF(OUT_MASSDW) THEN
         CNAME=PHNAM(1)
         WRITE(TITU,'(2A)') CNAME,' MASS DENSITY FOR FAULT BLOCK'
         CALL GEAOUT(N_MDENN,1,1)
      ENDIF

C-------print hc mass densities
      IF(OUT_MASSD) THEN
         DO I=2,NPH
            CNAME=PHNAM(I)
            WRITE(TITU,'(2A)') CNAME,' MASS DENSITY FOR FAULT BLOCK'
            CALL GEAOUT(N_MDENN,I,1)
         END DO
      ENDIF

C-------print interfacial tension
      IF(OUT_TENS) THEN
         WRITE(TITU,'(A)') ' INTERFACIAL TENSION FOR FAULT BLOCK'
         CALL GEAOUT(N_TENS,1,1)
      ENDIF

C-------temporarily store molar densities in DELC
      IF(OUT_MOLDW .OR. OUT_MOLD) THEN
         IPNT(1)=2
         IPNT(2)=N_PMD
         IPNT(3)=N_DELC
         CALL CALLWORK(XMOLDEN,IPNT)
      ENDIF

C-------print water molar densities
      IF(OUT_MOLDW) THEN
         CNAME=PHNAM(1)
         WRITE(TITU,'(2A)') CNAME,' MOLAR DENSITY FOR FAULT BLOCK'
         CALL GEAOUT(N_DELC,1,1)
      ENDIF

C-------print hc molar densities
      IF(OUT_MOLD) THEN
         DO I=2,NPH
            CNAME=PHNAM(I)
            WRITE(TITU,'(2A)') CNAME,' MOLAR DENSITY FOR FAULT BLOCK'
            CALL GEAOUT(N_DELC,I,1)
         END DO
      ENDIF

C-------use DELC for relative permeabilities
      IF(OUT_VISCW .OR. OUT_VISC .OR. OUT_RELP) THEN
         I4UTIL = NPH
         R8UTIL = ONE
         IPNT(1) = 3
         IPNT(2) = N_DELC
         IPNT(3) = N_R8U
         IPNT(4) = N_I4U
         CALL CALLWORK(SETARYR8N,IPNT)
         IPNT(1)=3
         IPNT(2)=N_ROCK
         IPNT(3)=N_DELC
         IPNT(4)=N_SAT
         CALL CALLWORK(XRELPERM,IPNT)
      ENDIF

C-------print relative permeabilities
      IF(OUT_RELP) THEN
         DO I=1,NPH
            CNAME=PHNAM(I)
            WRITE(TITU,'(2A)') CNAME,' RELATIVE PERM FOR FAULT BLOCK'
            CALL GEAOUT(N_DELC,I,1)
         END DO
      ENDIF

C-------use DELC for viscosities
      IF(OUT_VISCW .OR. OUT_VISC) THEN
         IPNT(1)=2
         IPNT(2)=N_DELC
         IPNT(3)=N_MOB
         CALL CALLWORK(XVISC,IPNT)
      ENDIF

C-------print water viscosities
      IF(OUT_VISCW) THEN
         CNAME=PHNAM(1)
         WRITE(TITU,'(2A)') CNAME,' VISCOSITY FOR FAULT BLOCK'
         CALL GEAOUT(N_DELC,1,1)
      ENDIF

C-------print hc viscosities
      IF(OUT_VISC) THEN
         DO I=2,NPH
            CNAME=PHNAM(I)
            WRITE(TITU,'(2A)') CNAME,' VISCOSITY FOR FAULT BLOCK'
            CALL GEAOUT(N_DELC,I,1)
         END DO
      ENDIF

C-------print z-factors
      IF(OUT_ZFAC) THEN
         DO I=2,NPH
            CNAME=PHNAM(I)
            WRITE(TITU,'(2A)') CNAME,' Z-FACTOR FOR FAULT BLOCK'
            CALL GEAOUT(N_FLZ,I-1,1)
         END DO
      ENDIF

C-------print vapor fractions
      IF(OUT_VAPF) THEN
         WRITE(TITU,'(A)') ' VAPOR FRACTION FOR FAULT BLOCK'
         CALL GEAOUT(N_FLV,1,1)
      ENDIF

C-------print total hc mole fraction array
C-------temporarily store mole fractions in CONCN
      IF(OUT_TMOLF) THEN
         IPNT(1)=2
         IPNT(2)=N_CONC
         IPNT(3)=N_DELC
         CALL CALLWORK(XTMOLFRAC,IPNT)
         DO I=1,NHC
            CNAME=CMPNAM(I+1)
            WRITE(TITU,'(3A)') 'TOTAL MOLE FRACTION OF ',
     &                          CNAME,' FOR FAULT BLOCK'
            CALL GEAOUT(N_DELC,I,1)
         END DO
      ENDIF

C-------print liquid mole fractions
C-------temporarily store mole fractions in DELC
      IPNT(1)=3
      IPNT(2)=N_PMD
      IPNT(3)=N_DELC
      IPNT(4)=N_I4U
      DO IPH = 2,NPH
         IF(.NOT.OUT_MOLF(IPH)) CYCLE
         I4UTIL=IPH
         CALL CALLWORK(XMOLFRAC,IPNT)
         PHNAME=PHNAM(IPH)
         DO I = 2,NC
            CNAME=CMPNAM(I)
            WRITE(TITU,'(4A)') CNAME,' MOLEFRAC FOR ',
     &                         PHNAME,' FOR FAULT BLOCK'
            CALL GEAOUT(N_DELC,I-1,1)
         END DO
      END DO

C-------print concentrations
      IF(OUT_CONC) THEN
         DO I=1,NC
            CNAME=CMPNAM(I)
            WRITE(TITU,'(2A)') CNAME,'HYDROCARBON CONC. FOR FAULT BLOCK'
            CALL GEAOUT(N_CONC,I,1)
         END DO
         DO I=1,NAQ
            CNAME=CMPAQNAM(I)
            WRITE(TITU,'(2A)') CNAME,'AQUEOUS CONC. FOR FAULT BLOCK'
            CALL GEAOUT(N_CONCAQ,I,1)
         ENDDO
      ENDIF

C-------print CO2 leakage rates
      IF(OUT_CO2LEAK) THEN
         CALL XCO2_LEAKAGE()
      ENDIF

C-------print total moles in grid blocks
C-------temporarily store moles in CONCN
      IF(OUT_MOLE) THEN
         IPNT(1)=3
         IPNT(2)=N_CONC
         IPNT(3)=N_DELC
         IPNT(4)=N_PV
         CALL CALLWORK(XTOLMOLE,IPNT)
         DO I = 1,NC
            CNAME=CMPNAM(I)
            WRITE(TITU,'(2A)') CNAME,' MOLES FOR FAULT BLOCK'
            CALL GEAOUT(N_DELC,I,1)
         END DO
      ENDIF

C-------print k-values
      IF(OUT_KVAL) THEN
         DO I=2,NC
            CNAME=CMPNAM(I)
            WRITE(TITU,'(2A)') CNAME,' K-VALUES FOR FAULT BLOCK'
            CALL GEAOUT(N_FLK,I-1,1)
         END DO
      ENDIF
      END

C*********************************************************************
      SUBROUTINE XMOLDEN (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                    KL1,KL2,KEYOUT,NBLK,PMD,MOLDEN)
C*********************************************************************
 
C  COMPUTES CURRENT MOLAR DENSITIES FROM PMD.
C  THIS IS A WORK ROUTINE.

C  PMD(I,J,K,J)= PRODUCT OF MOLAR DENSITY AND MOLE FRACTION (INPUT, REAL*8)

C  MOLDEN(I,J,K,IPH)= MOLAR DENSITY OF PHASE IPH (OUTPUT, REAL*8)

C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'xparam.h'
      INCLUDE 'xmodel.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 MOLDEN(IDIM,JDIM,KDIM,NPH),PMD(IDIM,JDIM,KDIM,NCINPH)
      INTEGER I,J,K,IPH,IC,L

      DO IPH = 1,NPH
         DO K = KL1,KL2
            DO J = JL1V(K),JL2V(K)
               DO I = IL1,IL2
                  MOLDEN(I,J,K,IPH) = ZERO
               END DO
            END DO
         END DO
      END DO
      DO IPH = 1,NPH
         DO IC = 1,NC
            L = ICINPH(IC,IPH)
            IF(L == 0) CYCLE
            DO K = KL1,KL2
               DO J = JL1V(K),JL2V(K)
                  DO I = IL1,IL2
                     MOLDEN(I,J,K,IPH) = MOLDEN(I,J,K,IPH) +
     &                                   PMD(I,J,K,L)
                  END DO
               END DO
            END DO
         END DO
      END DO

      END

C*********************************************************************
      SUBROUTINE XVISC (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                  KL1,KL2,KEYOUT,NBLK,RELP,MOB)
C*********************************************************************
 
C  COMPUTES VISCOSITIES FOR CELLS WHERE RELATIVE PERMS ARE NONZERO
C  THIS IS A WORK ROUTINE.

C  REL(I,J,K,J,IPH) = RELATIVE PERMEABILITY OF PHASE IPH (INPUT, REAL*8)
C                   = VISCOSITY OF PHASE IPH  (OUTPUT, REAL*8)

C  MOB(I,J,K,IPH)= MOBILITY OF PHASE IPH (OUTPUT, REAL*8)

C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'xparam.h'
      INCLUDE 'xmodel.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 RELP(IDIM,JDIM,KDIM,NPH),MOB(IDIM,JDIM,KDIM,NPH)
      INTEGER I,J,K,IPH

      DO IPH = 1,NPH
         DO K = KL1,KL2
            DO J = JL1V(K),JL2V(K)
               DO I = IL1,IL2
                  IF(MOB(I,J,K,IPH) > ZERO) THEN
                     RELP(I,J,K,IPH) = RELP(I,J,K,IPH)/MOB(I,J,K,IPH)
                  ELSE
                     RELP(I,J,K,IPH) = ZERO
                  ENDIF
               END DO
            END DO
         END DO
      END DO
      END

C*********************************************************************
      SUBROUTINE XMOLFRAC (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                     KL1,KL2,KEYOUT,NBLK,PMD,MOLFRAC,IPH)
C*********************************************************************
 
C  COMPUTES CURRENT MOLE FRACTION FOR PHASE IPH FROM PMD.
C  THIS IS A WORK ROUTINE.

C  PMD(I,J,K,J)= PRODUCT OF MOLAR DENSITY AND MOLE FRACTION (INPUT, REAL*8)

C  MOLFRAC(I,J,K,IC)= MOLE FRACTION OF COMPONENT (OUTPUT, REAL*8)

C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'xparam.h'
      INCLUDE 'xmodel.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK,IPH
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 MOLFRAC(IDIM,JDIM,KDIM,NC),PMD(IDIM,JDIM,KDIM,NCINPH)
      INTEGER I,J,K,IC,L,M

      DO K = KL1,KL2
         DO J = JL1V(K),JL2V(K)
            DO I = IL1,IL2
               MOLFRAC(I,J,K,NC) = SMALL
            END DO
         END DO
      END DO
      DO IC = 2,NC
         L = ICINPH(IC,IPH)
         IF(L == 0) CYCLE
         DO K = KL1,KL2
            DO J = JL1V(K),JL2V(K)
               DO I = IL1,IL2
                  MOLFRAC(I,J,K,NC) = MOLFRAC(I,J,K,NC) + PMD(I,J,K,L)
               END DO
            END DO
         END DO
      END DO
      DO K = KL1,KL2
         DO J = JL1V(K),JL2V(K)
            DO I = IL1,IL2
               MOLFRAC(I,J,K,NC) = ONE / MOLFRAC(I,J,K,NC)
            END DO
         END DO
      END DO
      DO IC = 2,NC
         M = IC-1
         L = ICINPH(IC,IPH)
         IF(L == 0) THEN
            DO K = KL1,KL2
               DO J = JL1V(K),JL2V(K)
                  DO I = IL1,IL2
                     MOLFRAC(I,J,K,M) = ZERO
                  END DO
               END DO
            END DO
         ELSE
            DO K = KL1,KL2
               DO J = JL1V(K),JL2V(K)
                  DO I = IL1,IL2
                     MOLFRAC(I,J,K,M) = PMD(I,J,K,L)*MOLFRAC(I,J,K,NC)
                  END DO
               END DO
            END DO
         ENDIF
      END DO
      END

C*********************************************************************
      SUBROUTINE XTMOLFRAC (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                      KL1,KL2,KEYOUT,NBLK,CONC,MOLFRAC)
C*********************************************************************
 
C  COMPUTES TOTAL MOLE FRACTION FROM CONC.
C  NOTE OFFSET BETWEEN CONC AND MOLFRAC
C  THIS IS A WORK ROUTINE.

C  CONC(I,J,K,J)= CONCENTRAION OF IC (INPUT, REAL*8)

C  MOLFRAC(I,J,K,IC)= MOLE FRACTION OF COMPONENT (OUTPUT, REAL*8)

C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'xparam.h'
      INCLUDE 'xmodel.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK,IPH
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 MOLFRAC(IDIM,JDIM,KDIM,NC),CONC(IDIM,JDIM,KDIM,NC)
      INTEGER I,J,K,IC,L,M

      DO K = KL1,KL2
         DO J = JL1V(K),JL2V(K)
            DO I = IL1,IL2
               MOLFRAC(I,J,K,NC) = SMALL + CONC(I,J,K,2)
            END DO
         END DO
      END DO
      DO IC = 3,NC
         DO K = KL1,KL2
            DO J = JL1V(K),JL2V(K)
               DO I = IL1,IL2
                  MOLFRAC(I,J,K,NC) = MOLFRAC(I,J,K,NC) + CONC(I,J,K,IC)
               END DO
            END DO
         END DO
      END DO
      DO K = KL1,KL2
         DO J = JL1V(K),JL2V(K)
            DO I = IL1,IL2
               MOLFRAC(I,J,K,NC) = ONE / MOLFRAC(I,J,K,NC) 
            END DO
         END DO
      END DO
      DO IC = 2,NC
         L = IC-1
         DO K = KL1,KL2
            DO J = JL1V(K),JL2V(K)
               DO I = IL1,IL2
                  MOLFRAC(I,J,K,L) = CONC(I,J,K,IC)*MOLFRAC(I,J,K,NC)
               END DO
            END DO
         END DO
      END DO
      END

C*********************************************************************
      SUBROUTINE XTOLMOLE (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                     KL1,KL2,KEYOUT,NBLK,CONC,MOLE,PV)
C*********************************************************************
 
C  COMPUTES TOTL MOLES FROM CONC AND PV.
C  THIS IS A WORK ROUTINE.

C  CONC(I,J,K,IC)= CONCENTRATION OF COMPONENT IC (INPUT, REAL*8)
C  PV(I,J,K)= PORE VOLUME (INPUT, REAL*8)
C  MOLE(I,J,K,IC)= MOLES OF COMPONENT (OUTPUT, REAL*8)

C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'xparam.h'
      INCLUDE 'xmodel.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 MOLE(IDIM,JDIM,KDIM,NC),CONC(IDIM,JDIM,KDIM,NC),
     &       PV(IDIM,JDIM,KDIM)
      INTEGER I,J,K,IC

      DO IC = 1,NC
         DO K = KL1,KL2
            DO J = JL1V(K),JL2V(K)
               DO I = IL1,IL2
                  MOLE(I,J,K,IC) = CONC(I,J,K,IC)*PV(I,J,K)
               END DO
            END DO
         END DO
      END DO
      END

C*********************************************************************
      SUBROUTINE XCR (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                KL1,KL2,KEYOUT,NBLK,CR,POR,COUT)
C*********************************************************************
 
C  COMPUTES COMPRESSIBILITY FROM CR.
C  THIS IS A WORK ROUTINE.

C  POR(I,J,K)= REFERENCE PORE VOLUME (INPUT, REAL*4)
C  CR(I,J,K,L)= COMRESSIBILITY X POR (INPUT, REAL*8)
C  COUT(I,J,K,L)= COMRESSIBILITY (OUTPUT, REAL*8)

C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'xparam.h'
      INCLUDE 'xmodel.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
      REAL*4 POR(IDIM,JDIM,KDIM),CR(IDIM,JDIM,KDIM)
      REAL*8 COUT(IDIM,JDIM,KDIM)
      INTEGER I,J,K

      DO K = KL1,KL2
         DO J = JL1V(K),JL2V(K)
            DO I = IL1,IL2
               IF(POR(I,J,K) > ZERO) THEN
                  COUT(I,J,K) = CR(I,J,K)/POR(I,J,K)
               ELSE
                  COUT(I,J,K) = ZERO
               ENDIF
            END DO
         END DO
      END DO
      END


C*********************************************************************
      SUBROUTINE XRELPERM(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                    KL2,KEYOUT,NBLK,KROCK,RELP,SAT)
C*********************************************************************
 
C  ROUTINE EVALUATES 3-PHASE RELATIVE PERMEABILITIES. THIS IS A WORK 
C  ROUTINE AND ASSUMES:
C                         PHASE 1 = WATER
C                         PHASE 2 = LIQUID
C                         PHASE 3 = VAPOR
C  INPUT:
C     KROCK(I,J,K)   = ROCK CURVE (INTEGER)
C     SAT(I,J,K,IPH) = SATURATION FOR PHASE IPH (REAL*8)

C  OUTPUT:
C     RELP(I,J,K,IPH) = 3-PHASE RELATIVE PERMEABILITY FOR PHASE IPH 
C                       (REAL*8)
C     SAT(I,J,K,IPH)  = SATURATION OF PHASE IPH (REAL*8)
C***********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'xmodel.h'
      INCLUDE 'xparam.h'
      INCLUDE 'rock.h'
C-----------------------------------------------------------------------
C     Dummy Arguments
C-----------------------------------------------------------------------
      INTEGER IDIM,JDIM,KDIM,IL1,IL2,KL1,KL2,NBLK,LDIM
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
      INTEGER KROCK(IDIM,JDIM,KDIM)
      REAL*8 RELP(IDIM,JDIM,KDIM,NPH),SAT(IDIM,JDIM,KDIM,NPH)
C-----------------------------------------------------------------------
C     Local Variables
C-----------------------------------------------------------------------
      INTEGER I,J,K,KR
      REAL*8 SW,SG,RELW,RELO,RELG,DKWSW,DKOSW,DKOSG,DKGSG,P
C-----------------------------------------------------------------------
C     THREE-PHASE
C-----------------------------------------------------------------------
      IF(NPH == 3) THEN
         DO K = KL1,KL2
            DO  J = JL1V(K),JL2V(K)
               DO  I = IL1,IL2
                  IF (KEYOUT(I,J,K) /= 1) CYCLE
                  KR = KROCK(I,J,K)
                  SW = SAT(I,J,K,1)
                  SG = SAT(I,J,K,3)
                  CALL RELPERM3(KR,SW,SG,RELW,RELG,RELO,DKWSW,
     &                          DKOSW,DKOSG,DKGSG)
                  IF(RELW <= TEN_M10) DKWSW = ZERO
                  IF(RELO <= TEN_M10) THEN
                     DKOSW = ZERO
                     DKOSG = ZERO
                  ENDIF
                  IF(RELG <= TEN_M10) DKGSG = ZERO
                  RELP(I,J,K,1) = RELW
                  RELP(I,J,K,2) = RELO
                  RELP(I,J,K,3) = RELG
               END DO
            END DO
         END DO
C-----------------------------------------------------------------------
C     TWO-PHASE
C-----------------------------------------------------------------------
      ELSEIF(NPH == 2) THEN
         DO K = KL1,KL2
            DO  J = JL1V(K),JL2V(K)
               DO  I = IL1,IL2
                  IF (KEYOUT(I,J,K) /= 1) CYCLE
                  KR = KROCK(I,J,K)
                  SW = SAT(I,J,K,1)
                  SG = ZERO
                  CALL RELPERM3(KR,SW,SG,RELW,RELG,RELO,DKWSW,
     &                          DKOSW,DKOSG,DKGSG)
                  IF(RELW <= TEN_M10) DKWSW = ZERO
                  IF(RELO <= TEN_M10) DKOSW = ZERO
                  RELP(I,J,K,1) = RELW
                  RELP(I,J,K,2) = RELO
                  RELP(I,J,K,3) = ZERO
               END DO
            END DO
         END DO
C-----------------------------------------------------------------------
C     SINGLE-PHASE
C-----------------------------------------------------------------------
      ELSEIF(NPH == 1) THEN
         DO K = KL1,KL2
            DO  J = JL1V(K),JL2V(K)
               DO  I = IL1,IL2
                  IF (KEYOUT(I,J,K) /= 1) CYCLE
                  RELP(I,J,K,1) = ONE
                  RELP(I,J,K,2) = ZERO
                  RELP(I,J,K,3) = ZERO
               END DO
            END DO
         END DO
      ENDIF

      RETURN
      END

C*********************************************************************
      SUBROUTINE XMATRIX_OUT(KERR)
C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'xarydat.h'

      INTEGER IW(4),NEQ,KERR

      NEQ=1
      IW(1)=2
      IW(2)=N_XCOF
      IW(3)=N_XRESID
      CALL CALLWORK_COFOUT(NSTEP,NEWT,7,NEQ,N_XCOF,N_XRESID)
      END


C*********************************************************************
      SUBROUTINE X1DTMPROUT()
C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'xarydat.h'
      INCLUDE 'wells.h'
      INTEGER ITMP(2)
      LOGICAL ONCEONLY
      EXTERNAL X1DTEMPROUT
      DATA ITMP/2*0/,ONCEONLY/.TRUE./

      IF(ONCEONLY) THEN
         ONCEONLY=.FALSE.
         ITMP(1)=1
         ITMP(2)=N_TEMPR
      ENDIF

      CALL CALLWORK(X1DTEMPROUT,ITMP)

      RETURN
      END

C*********************************************************************
      SUBROUTINE X1DTEMPROUT(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                       KL2,KEYOUT,NBLK,TEMPR)
C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'wells.h'
      INCLUDE 'xresprop.h'
      INCLUDE 'xwells.h'
C*********************************************************************
C  PRINTS 1D LINE PLOT OF TEMPR TO TECPLOT COMPATIBLE FILE.
C  THIS IS A TEMPORARY WORK ROUTINE BUT WORKS FOR ONE PROC ONLY.
C  INPUT:
C     TEMPR(I,J,K)   = RESERVOIR TEMPERATURE (F)
C-----------------------------------------------------------------------
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V(KDIM),JL2V(KDIM),KL1,KL2,
     &        KEYOUT(IDIM,JDIM,KDIM),NBLK
      REAL*8  TEMPR(IDIM,JDIM,KDIM)
C-----------------------------------------------------------------------
C     Local variables
C-----------------------------------------------------------------------
      INTEGER I,IDIMG,IERR,IW,J,JDIMG,KDIMG,K,NFT
      REAL*8 Y1,Y2,LY,TSOURCE
      CHARACTER*20 FTNAM
      LOGICAL FIRSTTIME
      DATA FIRSTTIME/.TRUE./
      PARAMETER (NFT=90,FTNAM='tmpr_soln.dat')
C-----------------------------------------------------------------------

      CALL BLKDIM(NBLK,IDIMG,JDIMG,KDIMG,IERR)

C GET SOURCE WELL TEMP
      DO IW=1,NUMWEL
         IF(TINJ(IW) /= TSURF) TSOURCE=TINJ(IW)
         EXIT
      END DO

      IF(FIRSTTIME) THEN
         OPEN(UNIT=NFT,FILE=FTNAM,STATUS='replace')
      ELSE
         OPEN(UNIT=NFT,FILE=FTNAM,STATUS='old',ACCESS='append')
      ENDIF
      IF(.NOT.FIRSTTIME) THEN
         WRITE(NFT,*)
         WRITE(NFT,*)
      ENDIF
      IF(FIRSTTIME) THEN
         FIRSTTIME=.FALSE.
         WRITE(NFT,*)  'TITLE = "1D TEMP PLOT"'
      ENDIF
      WRITE(NFT,*) 'VARIABLES = "Y [ft/ft]"," T [F/F]"'
      WRITE(NFT,*) 'ZONE F=BLOCK, T="", I = ',JDIMG

      Y1=YREC(1,NBLK)
      Y2=YREC(JDIMG+1,NBLK)
      LY=Y2-Y1
      WRITE(NFT,15) (0.5D0*(YREC(J,NBLK)+YREC(J+1,NBLK))/LY,J=1,JDIMG)
      WRITE(NFT,*)
C      WRITE(NFT,15) ((TEMPR(IL1,J,KL1)-TSURF)/(TSOURCE-TSURF),J=JLAY+1,
C     &                JDIMG+JLAY)
      WRITE(NFT,15) (TEMPR(IL1,J,KL1),J=JLAY+1,JDIMG+JLAY)

   15 FORMAT (2X 6F12.4)

      CLOSE(NFT)
          
      RETURN
      END


C*********************************************************************
      SUBROUTINE X1DXCPOUT()
C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'xarydat.h'
      INTEGER ICP(2)
      LOGICAL ONCEONLY
      EXTERNAL X1DCPOUT
      DATA ICP/2*0/,ONCEONLY/.TRUE./

      IF(ONCEONLY) THEN
         ONCEONLY=.FALSE.
         ICP(1)=1
         ICP(2)=N_XCPL
      ENDIF

      CALL CALLWORK(X1DCPOUT,ICP)

      RETURN
      END

C*********************************************************************
      SUBROUTINE X1DCPOUT(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                    KL2,KEYOUT,NBLK,XCPL)
C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'xresprop.h'
      INCLUDE 'xmodel.h'
C*********************************************************************
C  PRINTS 1D LINE PLOT OF PHASE SPECIFIC HEATS CP TO TECPLOT COMPATIBLE 
C  FILE. THIS IS A TEMPORARY WORK ROUTINE BUT WORKS FOR ONE PROC ONLY.
C  INPUT:
C     XCPL(I,J,K,IPH)   = SPECIFIC HEAT (BTU/LB-F)
C-----------------------------------------------------------------------
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V(KDIM),JL2V(KDIM),KL1,KL2,
     &        KEYOUT(IDIM,JDIM,KDIM),NBLK
      REAL*8 XCPL(IDIM,JDIM,KDIM,NPH)
C-----------------------------------------------------------------------
C     Local variables
C-----------------------------------------------------------------------
      INTEGER I,IPH,IDIMG,IERR,IW,J,JDIMG,KDIMG,K,NFCP1,NFCP2,NFCP3
      REAL*8 Y1,Y2,LY
      CHARACTER*20 FCPNAM1,FCPNAM2,FCPNAM3
      LOGICAL FIRSTTIME
      DATA FIRSTTIME/.TRUE./
      PARAMETER (NFCP1=91,NFCP2=92,NFCP3=93)
      PARAMETER (FCPNAM1='xcp1_soln.dat',FCPNAM2='xcp2_soln.dat',
     &           FCPNAM3='xcp3_soln.dat')
C-----------------------------------------------------------------------

      CALL BLKDIM(NBLK,IDIMG,JDIMG,KDIMG,IERR)

      IF(FIRSTTIME) THEN
         OPEN(UNIT=NFCP1,FILE=FCPNAM1,STATUS='replace')
         OPEN(UNIT=NFCP2,FILE=FCPNAM2,STATUS='replace')
         OPEN(UNIT=NFCP3,FILE=FCPNAM3,STATUS='replace')
      ELSE
         OPEN(UNIT=NFCP1,FILE=FCPNAM1,STATUS='old',ACCESS='append')
         OPEN(UNIT=NFCP2,FILE=FCPNAM2,STATUS='old',ACCESS='append')
         OPEN(UNIT=NFCP3,FILE=FCPNAM3,STATUS='old',ACCESS='append')
      ENDIF
      IF(.NOT.FIRSTTIME) THEN
         WRITE(NFCP1,*)
         WRITE(NFCP1,*)
         WRITE(NFCP2,*)
         WRITE(NFCP2,*)
         WRITE(NFCP3,*)
         WRITE(NFCP3,*)
      ENDIF
      IF(FIRSTTIME) THEN
         FIRSTTIME=.FALSE.
         WRITE(NFCP1,*)  'TITLE = "1D WATER SPECIFIC HEAT PLOT"'
         WRITE(NFCP2,*)  'TITLE = "1D OIL SPECIFIC HEAT PLOT"'
         WRITE(NFCP3,*)  'TITLE = "1D GAS SPECIFIC HEAT PLOT"'
      ENDIF
      WRITE(NFCP1,*) 'VARIABLES = "Y [ft]"," XCPW [BTU/LB-F]"'
      WRITE(NFCP1,*) 'ZONE F=BLOCK, T="", I = ',JDIMG
      WRITE(NFCP2,*) 'VARIABLES = "Y [ft]"," XCPO [BTU/LB-F]"'
      WRITE(NFCP2,*) 'ZONE F=BLOCK, T="", I = ',JDIMG
      WRITE(NFCP3,*) 'VARIABLES = "Y [ft]"," XCPG [BTU/LB-F]"'
      WRITE(NFCP3,*) 'ZONE F=BLOCK, T="", I = ',JDIMG

      Y1=YREC(1,NBLK)
      Y2=YREC(JDIMG+1,NBLK)
      LY=Y2-Y1
      WRITE(NFCP1,15) (0.5D0*(YREC(J,NBLK)+YREC(J+1,NBLK))/LY,J=1,JDIMG)
      WRITE(NFCP1,*)
      WRITE(NFCP1,15) (XCPL(IL1,J,KL1,1),J=JLAY+1,JDIMG+JLAY)

      IF(NPH > 1) THEN
         WRITE(NFCP2,15) (0.5D0*(YREC(J,NBLK)+YREC(J+1,NBLK))/LY,
     &                    J=1,JDIMG)
         WRITE(NFCP2,*)
         WRITE(NFCP2,15) (XCPL(IL1,J,KL1,2),J=JLAY+1,JDIMG+JLAY)

         IF(NPH > 2) THEN
            WRITE(NFCP3,15) (0.5D0*(YREC(J,NBLK)+YREC(J+1,NBLK))/LY,
     &                       J=1,JDIMG)
            WRITE(NFCP3,*)
            WRITE(NFCP3,15) (XCPL(IL1,J,KL1,3),J=JLAY+1,JDIMG+JLAY)
         ENDIF
      ENDIF
   15 FORMAT (2X 6F12.4)

      CLOSE(NFCP1)
      CLOSE(NFCP2)
      CLOSE(NFCP3)
          
      RETURN
      END

C*********************************************************************
      SUBROUTINE X1DPHDENOUT()
C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'xarydat.h'
      INTEGER IMD(2)
      LOGICAL ONCEONLY
      EXTERNAL X1DDENOUT
      DATA IMD/2*0/,ONCEONLY/.TRUE./

      IF(ONCEONLY) THEN
         ONCEONLY=.FALSE.
         IMD(1)=1
         IMD(2)=N_PMDEN
      ENDIF

      CALL CALLWORK(X1DDENOUT,IMD)

      RETURN
      END

C*********************************************************************
      SUBROUTINE X1DDENOUT(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                     KL2,KEYOUT,NBLK,MDEN)
C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'xresprop.h'
      INCLUDE 'xmodel.h'
C*********************************************************************
C  PRINTS 1D LINE PLOT OF PHASE MASS DENSITIES TO TECPLOT COMPATIBLE 
C  FILE. THIS IS A TEMPORARY WORK ROUTINE BUT WORKS FOR ONE PROC ONLY.
C  INPUT:
C     MDEN(I,J,K,IPH)   = PHASE MASS DENSITY (LB/CU-FT)
C-----------------------------------------------------------------------
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V(KDIM),JL2V(KDIM),KL1,KL2,
     &        KEYOUT(IDIM,JDIM,KDIM),NBLK
      REAL*8 MDEN(IDIM,JDIM,KDIM,NPH)
C-----------------------------------------------------------------------
C     Local variables
C-----------------------------------------------------------------------
      INTEGER I,IDIMG,IERR,IW,J,JDIMG,KDIMG,K,NFMD1,NFMD2,NFMD3
      REAL*8 Y1,Y2,LY
      CHARACTER*20 FMDNAM1,FMDNAM2,FMDNAM3
      LOGICAL FIRSTTIME
      DATA FIRSTTIME/.TRUE./
      PARAMETER (NFMD1=94,NFMD2=95,NFMD3=96)
      PARAMETER (FMDNAM1='xmd1_soln.dat',FMDNAM2='xmd2_soln.dat',
     &           FMDNAM3='xmd3_soln.dat')
C-----------------------------------------------------------------------

      CALL BLKDIM(NBLK,IDIMG,JDIMG,KDIMG,IERR)

      IF(FIRSTTIME) THEN
         OPEN(UNIT=NFMD1,FILE=FMDNAM1,STATUS='replace')
         OPEN(UNIT=NFMD2,FILE=FMDNAM2,STATUS='replace')
         OPEN(UNIT=NFMD3,FILE=FMDNAM3,STATUS='replace')
      ELSE
         OPEN(UNIT=NFMD1,FILE=FMDNAM1,STATUS='old',ACCESS='append')
         OPEN(UNIT=NFMD2,FILE=FMDNAM2,STATUS='old',ACCESS='append')
         OPEN(UNIT=NFMD3,FILE=FMDNAM3,STATUS='old',ACCESS='append')
      ENDIF
      IF(.NOT.FIRSTTIME) THEN
         WRITE(NFMD1,*)
         WRITE(NFMD1,*)
         WRITE(NFMD2,*)
         WRITE(NFMD2,*)
         WRITE(NFMD3,*)
         WRITE(NFMD3,*)
      ENDIF
      IF(FIRSTTIME) THEN
         FIRSTTIME=.FALSE.
         WRITE(NFMD1,*)  'TITLE = "1D WATER MASS DENSITY PLOT"'
         WRITE(NFMD2,*)  'TITLE = "1D OIL MASS DENSITY PLOT"'
         WRITE(NFMD3,*)  'TITLE = "1D GAS MASS DENSITY PLOT"'
      ENDIF
      WRITE(NFMD1,*) 'VARIABLES = "Y [ft]"," WATDEN [BTU/LB-F]"'
      WRITE(NFMD1,*) 'ZONE F=BLOCK, T="", I = ',JDIMG
      WRITE(NFMD2,*) 'VARIABLES = "Y [ft]"," OILDEN [BTU/LB-F]"'
      WRITE(NFMD2,*) 'ZONE F=BLOCK, T="", I = ',JDIMG
      WRITE(NFMD3,*) 'VARIABLES = "Y [ft]"," GASDEN [BTU/LB-F]"'
      WRITE(NFMD3,*) 'ZONE F=BLOCK, T="", I = ',JDIMG

      Y1=YREC(1,NBLK)
      Y2=YREC(JDIMG+1,NBLK)
      LY=Y2-Y1
      WRITE(NFMD1,15) (0.5D0*(YREC(J,NBLK)+YREC(J+1,NBLK))/LY,J=1,JDIMG)
      WRITE(NFMD1,*)
      WRITE(NFMD1,15) (MDEN(IL1,J,KL1,1),J=JLAY+1,JDIMG+JLAY)

      IF(NPH > 1) THEN
         WRITE(NFMD2,15) (0.5D0*(YREC(J,NBLK)+YREC(J+1,NBLK))/LY,
     &                    J=1,JDIMG)
         WRITE(NFMD2,*)
         WRITE(NFMD2,15) (MDEN(IL1,J,KL1,2),J=JLAY+1,JDIMG+JLAY)

         IF(NPH > 2) THEN
            WRITE(NFMD3,15) (0.5D0*(YREC(J,NBLK)+YREC(J+1,NBLK))/LY,
     &                       J=1,JDIMG)
            WRITE(NFMD3,*)
            WRITE(NFMD3,15) (MDEN(IL1,J,KL1,3),J=JLAY+1,JDIMG+JLAY)
         ENDIF
      ENDIF
   15 FORMAT (2X 6F12.4)

      CLOSE(NFMD1)
      CLOSE(NFMD2)
      CLOSE(NFMD3)
          
      RETURN
      END

C*********************************************************************
      SUBROUTINE X1DPHSATOUT()
C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'xarydat.h'
      INTEGER ISAT(2)
      LOGICAL ONCEONLY
      EXTERNAL X1DSATOUT
      DATA ISAT/2*0/,ONCEONLY/.TRUE./

      IF(ONCEONLY) THEN
         ONCEONLY=.FALSE.
         ISAT(1)=1
         ISAT(2)=N_SAT
      ENDIF

      CALL CALLWORK(X1DSATOUT,ISAT)

      RETURN
      END

C*********************************************************************
      SUBROUTINE X1DSATOUT(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                     KL2,KEYOUT,NBLK,SAT)
C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'xresprop.h'
      INCLUDE 'xmodel.h'
C*********************************************************************
C  PRINTS 1D LINE PLOT OF PHASE SATURATIONS TO TECPLOT COMPATIBLE 
C  FILE. THIS IS A TEMPORARY WORK ROUTINE BUT WORKS FOR ONE PROC ONLY.
C  INPUT:
C     SAT(I,J,K,IPH)   = PHASE SATURATION
C-----------------------------------------------------------------------
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V(KDIM),JL2V(KDIM),KL1,KL2,
     &        KEYOUT(IDIM,JDIM,KDIM),NBLK
      REAL*8 SAT(IDIM,JDIM,KDIM,NPH)
C-----------------------------------------------------------------------
C     Local variables
C-----------------------------------------------------------------------
      INTEGER I,IDIMG,IERR,IW,J,JDIMG,KDIMG,K,NFS1,NFS2,NFS3
      REAL*8 Y1,Y2,LY
      CHARACTER*20 FSNAM1,FSNAM2,FSNAM3
      LOGICAL FIRSTTIME
      DATA FIRSTTIME/.TRUE./
      PARAMETER (NFS1=94,NFS2=95,NFS3=96)
      PARAMETER (FSNAM1='xsat1_soln.dat',FSNAM2='xsat2_soln.dat',
     &           FSNAM3='xsat3_soln.dat')
C-----------------------------------------------------------------------

      CALL BLKDIM(NBLK,IDIMG,JDIMG,KDIMG,IERR)

      IF(FIRSTTIME) THEN
         OPEN(UNIT=NFS1,FILE=FSNAM1,STATUS='replace')
         OPEN(UNIT=NFS2,FILE=FSNAM2,STATUS='replace')
         OPEN(UNIT=NFS3,FILE=FSNAM3,STATUS='replace')
      ELSE
         OPEN(UNIT=NFS1,FILE=FSNAM1,STATUS='old',ACCESS='append')
         OPEN(UNIT=NFS2,FILE=FSNAM2,STATUS='old',ACCESS='append')
         OPEN(UNIT=NFS3,FILE=FSNAM3,STATUS='old',ACCESS='append')
      ENDIF
      IF(.NOT.FIRSTTIME) THEN
         WRITE(NFS1,*)
         WRITE(NFS1,*)
         WRITE(NFS2,*)
         WRITE(NFS2,*)
         WRITE(NFS3,*)
         WRITE(NFS3,*)
      ENDIF
      IF(FIRSTTIME) THEN
         FIRSTTIME=.FALSE.
         WRITE(NFS1,*)  'TITLE = "1D WATER SATURATION PLOT"'
         WRITE(NFS2,*)  'TITLE = "1D OIL SATURATION PLOT"'
         WRITE(NFS3,*)  'TITLE = "1D GAS SATURATION PLOT"'
      ENDIF
      WRITE(NFS1,*) 'VARIABLES = "Y [ft]"," SWAT "'
      WRITE(NFS1,*) 'ZONE F=BLOCK, T="", I = ',JDIMG
      WRITE(NFS2,*) 'VARIABLES = "Y [ft]"," SOIL "'
      WRITE(NFS2,*) 'ZONE F=BLOCK, T="", I = ',JDIMG
      WRITE(NFS3,*) 'VARIABLES = "Y [ft]"," SGAS "'
      WRITE(NFS3,*) 'ZONE F=BLOCK, T="", I = ',JDIMG

      Y1=YREC(1,NBLK)
      Y2=YREC(JDIMG+1,NBLK)
      LY=Y2-Y1
      WRITE(NFS1,15) (0.5D0*(YREC(J,NBLK)+YREC(J+1,NBLK))/LY,J=1,JDIMG)
      WRITE(NFS1,*)
      WRITE(NFS1,15) (SAT(IL1,J,KL1,1),J=JLAY+1,JDIMG+JLAY)

      IF(NPH > 1) THEN
         WRITE(NFS2,15) (0.5D0*(YREC(J,NBLK)+YREC(J+1,NBLK))/LY,
     &                    J=1,JDIMG)
         WRITE(NFS2,*)
         WRITE(NFS2,15) (SAT(IL1,J,KL1,2),J=JLAY+1,JDIMG+JLAY)

         IF(NPH > 2) THEN
            WRITE(NFS3,15) (0.5D0*(YREC(J,NBLK)+YREC(J+1,NBLK))/LY,
     &                       J=1,JDIMG)
            WRITE(NFS3,*)
            WRITE(NFS3,15) (SAT(IL1,J,KL1,3),J=JLAY+1,JDIMG+JLAY)
         ENDIF
      ENDIF
   15 FORMAT (2X 6F12.4)

      CLOSE(NFS1)
      CLOSE(NFS2)
      CLOSE(NFS3)
          
      RETURN
      END


C*********************************************************************
      SUBROUTINE X1DPHVELOUT()
C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'xarydat.h'
      INTEGER IVEL(2)
      LOGICAL ONCEONLY
      EXTERNAL X1DVELOUT
      DATA IVEL/2*0/,ONCEONLY/.TRUE./

      IF(ONCEONLY) THEN
         ONCEONLY=.FALSE.
         IVEL(1)=1
         IVEL(2)=N_XVEL
      ENDIF

      CALL CALLWORK(X1DVELOUT,IVEL)

      RETURN
      END

C*********************************************************************
      SUBROUTINE X1DVELOUT(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                     KL2,KEYOUT,NBLK,XVEL)
C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'xresprop.h'
      INCLUDE 'xmodel.h'
C*********************************************************************
C  PRINTS 1D LINE PLOT OF Y-DIR PHASE VELOCITIES TO TECPLOT COMPATIBLE 
C  FILE. THIS IS A TEMPORARY WORK ROUTINE BUT WORKS FOR ONE PROC ONLY.
C  INPUT:
C     XVEL(I,J,K,IPH,IDIR)   = PHASE DARCY VELOCITY (LB/CU-FT)
C-----------------------------------------------------------------------
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V(KDIM),JL2V(KDIM),KL1,KL2,
     &        KEYOUT(IDIM,JDIM,KDIM),NBLK
      REAL*8 XVEL(IDIM,JDIM,KDIM,NPH,3)
C-----------------------------------------------------------------------
C     Local variables
C-----------------------------------------------------------------------
      INTEGER I,IDIMG,IERR,IW,J,JDIMG,KDIMG,K,NFV1,NFV2,NFV3
      REAL*8 Y1,Y2,LY
      CHARACTER*20 FVNAM1,FVNAM2,FVNAM3
      LOGICAL FIRSTTIME
      DATA FIRSTTIME/.TRUE./
      PARAMETER (NFV1=97,NFV2=98,NFV3=99)
      PARAMETER (FVNAM1='xvy1_soln.dat',FVNAM2='xvy2_soln.dat',
     &           FVNAM3='xvy3_soln.dat')
C-----------------------------------------------------------------------

      CALL BLKDIM(NBLK,IDIMG,JDIMG,KDIMG,IERR)

      IF(FIRSTTIME) THEN
         OPEN(UNIT=NFV1,FILE=FVNAM1,STATUS='replace')
         OPEN(UNIT=NFV2,FILE=FVNAM2,STATUS='replace')
         OPEN(UNIT=NFV3,FILE=FVNAM3,STATUS='replace')
      ELSE
         OPEN(UNIT=NFV1,FILE=FVNAM1,STATUS='old',ACCESS='append')
         OPEN(UNIT=NFV2,FILE=FVNAM2,STATUS='old',ACCESS='append')
         OPEN(UNIT=NFV3,FILE=FVNAM3,STATUS='old',ACCESS='append')
      ENDIF
      IF(.NOT.FIRSTTIME) THEN
         WRITE(NFV1,*)
         WRITE(NFV1,*)
         WRITE(NFV2,*)
         WRITE(NFV2,*)
         WRITE(NFV3,*)
         WRITE(NFV3,*)
      ENDIF
      IF(FIRSTTIME) THEN
         FIRSTTIME=.FALSE.
         WRITE(NFV1,*)  'TITLE = "1D WATER DARCY VELOCITY PLOT"'
         WRITE(NFV2,*)  'TITLE = "1D OIL DARCY VELOCITY PLOT"'
         WRITE(NFV3,*)  'TITLE = "1D GAS DARCY VELOCITY PLOT"'
      ENDIF
      WRITE(NFV1,*) 'VARIABLES = "Y [ft]"," WATVEL [BTU/LB-F]"'
      WRITE(NFV1,*) 'ZONE F=BLOCK, T="", I = ',JDIMG+1
      WRITE(NFV2,*) 'VARIABLES = "Y [ft]"," OILVEL [BTU/LB-F]"'
      WRITE(NFV2,*) 'ZONE F=BLOCK, T="", I = ',JDIMG+1
      WRITE(NFV3,*) 'VARIABLES = "Y [ft]"," GASVEL [BTU/LB-F]"'
      WRITE(NFV3,*) 'ZONE F=BLOCK, T="", I = ',JDIMG+1

      Y1=YREC(1,NBLK)
      Y2=YREC(JDIMG+1,NBLK)
      LY=Y2-Y1
      WRITE(NFV1,15) (YREC(J,NBLK)/LY,J=1,JDIMG+1)
      WRITE(NFV1,*)
      WRITE(NFV1,15) (XVEL(IL1,J,KL1,1,2),J=JLAY+1,JDIMG+JLAY+1)

      IF(NPH > 1) THEN
         WRITE(NFV2,15) (YREC(J,NBLK)/LY,J=1,JDIMG+1)
         WRITE(NFV2,*)
         WRITE(NFV2,15) (XVEL(IL1,J,KL1,2,2),J=JLAY+1,JDIMG+JLAY+1)

         IF(NPH > 2) THEN
            WRITE(NFV3,15) (YREC(J,NBLK)/LY,J=1,JDIMG+1)
            WRITE(NFV3,*)
            WRITE(NFV3,15) (XVEL(IL1,J,KL1,3,2),J=JLAY+1,JDIMG+JLAY+1)
         ENDIF
      ENDIF
   15 FORMAT (2X 6F12.4)

      CLOSE(NFV1)
      CLOSE(NFV2)
      CLOSE(NFV3)
          
      RETURN
      END

C*********************************************************************
      SUBROUTINE XCO2_LEAKAGE()
C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'xarydat.h'
      INCLUDE 'xmodel.h'
      INCLUDE 'xthermal.h'
      INCLUDE 'blkary.h'
      INTEGER IMFR(3),ICO2L(5),IVEL(10),JPHDENS(3),JRELP(5)
      LOGICAL ONCEONLY
      EXTERNAL XMFRAC_ALL,XVELCOMP,XCO2_LEAKRATE,XPHDENS,XRELPERM2
      DATA IMFR/3*0/,ICO2L/5*0/,IVEL/10*0/,JRELP/5*0/,JPHDENS/3*0/,
     &     ONCEONLY/.TRUE./

      IF(ONCEONLY) THEN
         ONCEONLY=.FALSE.

         IMFR(1)=2
         IMFR(2)=N_PMD
         IMFR(3)=N_KSI

         JPHDENS(1)=2
         JPHDENS(2)=N_PMD
         JPHDENS(3)=N_PMDEN

         JRELP(1)=4
         JRELP(2)=N_ROCK
         JRELP(3)=N_XVISC
         JRELP(4)=N_SAT
         JRELP(5)=N_MOB

         IVEL(1)=9
         IVEL(2)=N_TCOFX
         IVEL(3)=N_TCOFY
         IVEL(4)=N_TCOFZ
         IVEL(5)=N_DEPTH
         IVEL(6)=N_PRES
         IVEL(7)=N_PC
         IVEL(8)=N_PMDEN
         IVEL(9)=N_MOB
         IVEL(10)=N_XVEL

         ICO2L(1)=4
         ICO2L(2)=N_PMDEN
         ICO2L(3)=N_KSI
         ICO2L(4)=N_TEMPR
         ICO2L(5)=N_XVEL
      ENDIF

      IF(XNO_DD.AND.(.NOT.XTHERMAL)) THEN
         CALL CALLWORK(XMFRAC_ALL,IMFR)
         CALL CALLWORK(XPHDENS,JPHDENS)
         CALL CALLWORK(XRELPERM2,JRELP)
         CALL CALLWORK(XVELCOMP,IVEL)
      ENDIF

      CALL CALLWORK(XCO2_LEAKRATE,ICO2L)

      RETURN
      END

C*********************************************************************
      SUBROUTINE XCO2_LEAKRATE(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                         KL1,KL2,KEYOUT,NBLK,MDEN,MFRAC,TEMPR,
     &                         XVEL)
C*********************************************************************
      USE xgendat
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'xparam.h'
      INCLUDE 'xmodel.h'
C*********************************************************************
C  PRINTS 1D LINE PLOT OF Y-DIR PHASE VELOCITIES TO TECPLOT COMPATIBLE 
C  FILE. THIS IS A TEMPORARY WORK ROUTINE BUT WORKS FOR ONE PROC ONLY.
C  INPUT:
C     MDEN(I,J,K,IPH)   = PHASE MASS DENSITY (LB/CU-FT)
C     MFRAC(I,J,K,L)   = MASS FRACTION OF COMPONENT IN PHASE 
C     XVEL(I,J,K,IPH,IDIR)   = PHASE DARCY VELOCITY (FT/DAY)
C  OUTPUT:
C     Problem specific CO2 leakage rate.
C-----------------------------------------------------------------------
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V(KDIM),JL2V(KDIM),KL1,KL2,
     &        KEYOUT(IDIM,JDIM,KDIM),NBLK
      REAL*8 MDEN(IDIM,JDIM,KDIM,NPH),MFRAC(IDIM,JDIM,KDIM,NCINPH),
     &       TEMPR(IDIM,JDIM,KDIM),XVEL(IDIM,JDIM,KDIM,NPH,3)
C-----------------------------------------------------------------------
c     Local Variables
C-----------------------------------------------------------------------
      INTEGER I,J,K,IS,JS,KS,NS,IS1,IG,JG,KG,IOFF,JOFF,KOFF,IERR,L,LC1,
     &        LC2
      REAL*8 TCS,CO2LK,VL,VG,ML,MG,MCO2L,MCO2G
C-----------------------------------------------------------------------

      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,IERR)
      IF(IERR > 0) STOP 'ERROR IN XCO2_LEAKRATE AT BLKOFF!!'

      IS=ICO2
      IS1=ICO2+1
      JS=JCO2
      KS=KCO2
      NS=NCO2

      DO K=KL1,KL2
         DO J=JL1V(K),JL2V(K)
            DO I=IL1,IL2
               IG=I+IOFF
               JG=J+JOFF
               KG=K+KOFF
               IF((IG == IS).AND.(JG == JS).AND.(KG == KS).AND.
     &            (NBLK == NS)) THEN
                  TCS=TEMPR(I,J,K)
                  WRITE(51,*) TIM,TCS
               ENDIF
               IF((IG == IS1).AND.(JG == JS).AND.(KG == KS).AND.
     &            (NBLK == NS)) THEN
                  CO2LK=ZERO
                  IF(XDARCYFLUX) THEN
                     VL=HALF*(XVEL(I,J,K,2,1)+XVEL(I-1,J,K,2,1))
                     VG=HALF*(XVEL(I,J,K,3,1)+XVEL(I-1,J,K,3,1))
                     ML=MDEN(I-1,J,K,2)
                     MG=MDEN(I-1,J,K,3)
                     LC1=ICINPH(2,2)
                     MCO2L=MFRAC(I-1,J,K,LC1)
                     LC2=ICINPH(2,3)
                     MCO2G=MFRAC(I-1,J,K,LC2)
                     CO2LK=MCO2L*VL+MCO2G*VG
                     VL=ML*VL
                     VG=MG*VG
                     CO2LK=MCO2L*VL+MCO2G*VG
                     WRITE(52,*) TIM,CO2LK
                  ELSE
                     WRITE(0,*) "WARNING: XDARCYFLUX NOT SET TO TRUE!!"
                  ENDIF
               ENDIF
            END DO
         END DO
      END DO

      RETURN
      END

