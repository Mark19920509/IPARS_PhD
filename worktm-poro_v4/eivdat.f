C EIVDAT.F -- ELASTIC MODEL INITIALIZATION REOUTINE
C ROUTINES IN THIS FILE:
C     SUBROUTINE EIVDAT(NERR)
C     SUBROUTINE EINIT(IDIM,JDIM,KDIM,LDIM,IL2,IL2,JL1V,JL2V,KL1,KL2,
C                      KEYOUT,NBLK,PV0,ROCKD)
C CODE HISTORY:
C    TAMEEM ALMANI   07/27/2016 INCLUDE NECESSARY CHANGES FOR
C                               COUPLING WITH MECHANICS
C*********************************************************************
      SUBROUTINE EIVDAT(NERR)
C*********************************************************************
C Elastic model initialization routine
C  1. Initialize some parameters
C  2. Call Ruijie''s code to solve for initial displacement
C  3. Store initial volumetric strain
C Saumik
C  4. Compute updated permeability and transmissibility
C  5. Compute permeability inverse for multi-point flux option
C Saumik
C
C  NERR = ERROR KEY STEPPED BY ONE FOR EACH ERROR
C         (INPUT AND OUTPUT, INTEGER)
C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
      INCLUDE 'times.h'
      INCLUDE 'layout.h'
      INCLUDE 'earydat.h'
      INCLUDE 'emodel.h'
      INCLUDE 'ebdary.h'
      INCLUDE 'mpfaary.h'
C --- SAUMIK,BGANIS
      INCLUDE 'tarydat.h'
C      INCLUDE 'xarydat.h'
      EXTERNAL COMPDEN_3PH,POR_VOL,ADD_ROCK_DEN,
     &         FLOWTOMECHANICS,MECHANICSTOFLOW,
     &         FLOWTOMECHANICSNONMATCHING,MECHANICSTOFLOWNONMATCHING,
     &         FLOWTOMECHANICSHETERO,MECHANICSTOFLOWHETERO
      INTEGER COPYARG(13)
      DATA COPYARG / 13*0 /
C --- SAUMIK,BGANIS

      INTEGER  NERR

      INTEGER  I,J,NEQ,KERR,ITER,JINIT(10),JCPY(4),JBODY(8)
      LOGICAL  FACTOR
      REAL*8   ZERO
      EXTERNAL CPYARYR8,CPYARYR8N,SETARYR8,EINIT,ESETUP_KEYOUT,
     &         EPRTDISP,EPRTPRES,BULKDEN_1PH,BULKDEN_2PH,
     &         BULKDEN_3PH,
     &         ESETUP_ELEM_NODE,COORD2DISP,DISP2COORD,EPROCOUTPUT,
     &         SETARYR8N,CPYPERMTOR8,
     &         CPYARYR4,EFFEC_MEAN_STRESS,TRANC1,TRANC2,EUPDATECR
      EXTERNAL BULKUPSCALE,EPROP
      INTEGER JEPROP(13)

      INTEGER  JSTRS(5),JTRANC(10)
      INTEGER  JPRTDISP(3),JPRTPRES(2)
      PARAMETER (ZERO=0.D0)

C FLOW MODEL INITIALIZATION

      MODACT = 17
      IF(PEFLOW.EQ.17.OR.MBPOROE) CALL TIVDAT(NERR)
              ! SAUMIK,BGANIS
      MODACT=15

C      MODACT = 16
C      IF(PEFLOW.EQ.16.OR.MBPOROE) CALL XIVDAT(NERR)
             ! SAUMIK,BGANIS
C      MODACT=15

ctm
C      MODACT = 18
C      IF(PEFLOW.EQ.18.OR.MBPOROE) CALL HIVDAT(NERR)
              ! SAUMIK,BGANIS
C      MODACT=15
ctm

cHYDROE_MPFA      MODACT = MGMODEL
cHYDROE_MPFA      IF(PEFLOW.EQ.MGMODEL) CALL GIVDAT(NERR)
cHYDROE_MPFA      MODACT=15

C SETUP TIMERS

      TIMNAM(35)='POROE MODEL TOTAL TIME'
      TIMKLS(35)=1
      TIMNAM(36)='POROE MODEL INITIALIZATION TIME'
      TIMKLS(36)=4
      TIMNAM(37)='POROE MODEL TOTAL LINEAR SOLVER TIME'
      TIMKLS(37)=1
      TIMNAM(38)='POROE MODEL COMMUNICATION'
      TIMKLS(38)=2
      TIMNAM(39)='POROE MODEL COPY MATRIX TO SOLVER TIME'
      TIMKLS(39)=4
      TIMNAM(40)='POROE MODEL SETUP AMG SOLVER/PRECOND TIME'
      TIMKLS(40)=4
      TIMNAM(41)='POROE MODEL COPY/OBTAIN SOLVER RHS TIME'
      TIMKLS(41)=4
      TIMNAM(42)='POROE MODEL SOLVER SOLVE TIME'
      TIMKLS(42)=1
      TIMNAM(43)='POROE MODEL PRE-PROCESS TIME'
      TIMKLS(43)=1
      TIMNAM(44)='POROE MODEL MATRIX-RHS SETUP TIME'
      TIMKLS(44)=1
      TIMNAM(45)='POROE MODEL POST-PROCESS TIME'
      TIMKLS(45)=1
      TIMNAM(46)='POROE MODEL MATRIX-RHS STEP TIME'
      TIMKLS(46)=1
      TIMNAM(47)='POROE MODEL STRN-STRS UPDATE TIME'
      TIMKLS(47)=1

      CALL TIMON(35)
      CALL TIMON(36)

      CALL TIMON(38)
      CALL UPDATE(N_PRESS,2)
      CALL UPDATE(N_EFLDEN,2)
      CALL TIMOFF(38)

      IF(MBPOROE) THEN ! SAUMIK,BGANIS
C CONVERT N_POR TO PORE VOLUME FOR MECHANICS IF MBPOROE IS TRUE
C DONE IN MPFA_POR_VOL FOR FLOW MODELS
C ALSO TRANSFER N_POR TO N_PORTRUE BEFORE UPDATING TO PORE VOLUME
         JINIT(1)=3
         JINIT(2)=N_EVOL
         JINIT(3)=N_POR
         JINIT(4)=N_PORTRUE
         CALL CALLWORK(POR_VOL,JINIT)
         CALL TIMON(38)
         CALL UPDATE(N_PORTRUE,2)
         CALL TIMOFF(38)

         COPYARG(1)=12
         COPYARG(3)=N_XC
         COPYARG(4)=N_YC
         COPYARG(5)=N_ZC
         COPYARG(7)=N_EVOL

         COPYARG(8)=N_MODUL
         COPYARG(9)=N_MODULFLOW
         COPYARG(10)=N_POISS
         COPYARG(11)=N_POISSFLOW
         COPYARG(12)=N_BIOTA
         COPYARG(13)=N_BIOTAFLOW

C UPSCALE MODULUS FOR THE HETEROGENEOUS CASE (CMAME PAPER)

         IF(NONMATCHING.AND.HETEROGENEOUS) THEN
      MODACT=17
C      MODACT=16
            COPYARG(2)=N_MODUL
            COPYARG(6)=N_MODULFLOW
            CALL TRANSFERHETERO(BULKUPSCALE,COPYARG)
            MODACT=15
            CALL TIMON(38)
            CALL UPDATE(N_MODUL,2)
            CALL UPDATE(N_BIOTA,2)
            CALL TIMOFF(38)
         ENDIF

         JEPROP(1) = 12
         JEPROP(2) = N_MODUL
         JEPROP(3) = N_POISS
         JEPROP(4) = N_BIOTA
         JEPROP(5) = N_BIOTM
         JEPROP(6) = N_ROCKD
         JEPROP(7) = N_PORTRUE
         JEPROP(8) = N_XC
         JEPROP(9) = N_YC
         JEPROP(10) = N_ZC
         JEPROP(11) = N_DISP_COMP
         JEPROP(12) = N_ECR
         JEPROP(13) = N_EVOL
         CALL CALLWORK(EPROP,JEPROP)
      ENDIF ! IF(MBPOROE)

      IF(NERRC.GT.0) THEN
         NERR = NERR + 1
         CALL TIMOFF(35)
         CALL TIMOFF(36)
         RETURN
      ENDIF
      CALL TIMON(38)
      CALL UPDATE(N_MODUL,2)
      CALL UPDATE(N_POISS,2)
      CALL UPDATE(N_BIOTA,2)
      CALL UPDATE(N_BIOTM,2)
      CALL UPDATE(N_ROCKD,2)
      CALL UPDATE(N_PASSO,2)
      CALL UPDATE(N_YIELD_SIG0,2)
      CALL UPDATE(N_YIELD_ALPHA,2)
      CALL UPDATE(N_FLOW_ALPHA,2)
      CALL UPDATE(N_HARDEN_MODEL,2)
      CALL UPDATE(N_HARDEN_C1,2)
      CALL UPDATE(N_HARDEN_C2,2)
      CALL UPDATE(N_EVOL,2)
      CALL UPDATE(N_STRESS_INIT(1),2)
      CALL UPDATE(N_STRESS_INIT(2),2)
      CALL UPDATE(N_STRESS_INIT(3),2)
      CALL UPDATE(N_STRESS_INIT(4),2)
      CALL UPDATE(N_STRESS_INIT(5),2)
      CALL UPDATE(N_STRESS_INIT(6),2)
      CALL TIMOFF(38)

C SETUP ELASTIC CONNECTIONS, MAPS AND COEFFICIENTS

      JINIT(1) = 1
      JINIT(2) = N_KEYOUT_CR
      CALL CALLWORK(ESETUP_KEYOUT,JINIT)

      JINIT(1) = 2
      JINIT(2) = N_PROCN
      JINIT(3) = N_KEYOUT_CR
      CALL CALLWORK(EPROCOUTPUT,JINIT)
      CALL TIMON(38)
      CALL UPDATE(N_PROCN,4)
      CALL TIMOFF(38)

C 1. SETUP LOCAL ELEMENT ID TO BE SENT TO POROHEX
C 2. SETUP LOCAL NODE ID FOR ACTIVE AND GHOST NODE TO BE SENT TO POROHEX

      JINIT(1) = 2
      JINIT(2) = N_ELEM_LID
      JINIT(3) = N_NODE_LID
      CALL CALLWORK(ESETUP_ELEM_NODE,JINIT)

      CALL EGET_GELEI_LSIZE(NERR)

C UPDATE BOUNDARY CONDITION ACROSS PROCESSORS

         KERR = 0
      CALL TIMON(38)
         CALL EBDARY_UPDATE(KERR)
      CALL TIMOFF(38)

C COPY INITIAL PORE VOLUME TO PORE
C VOLUME ASSOCIATED WITH FLOW

      JCPY(1) = 2
      JCPY(2) = N_POR
      JCPY(3) = N_EPV_FLOW
      CALL CALLWORK(CPYARYR8,JCPY)

C MOVED BULK DENSITY INITIALIZATION HERE

      CALL ESETARYR8N(N_BULK_DEN,ZERO,1)

      IF(MBPOROE) THEN ! SAUMIK,BGANIS

C UPSCALE PORE PRESSURE
         COPYARG(2)=N_PRESS
         COPYARG(6)=N_PRES
        MODACT=17
C        MODACT=16
         IF(NONMATCHING.AND.HETEROGENEOUS) THEN ! SAUMIK, CMAME PAPER
         CALL TRANSFERHETERO(FLOWTOMECHANICSHETERO,COPYARG)
         ELSEIF(NONMATCHING.AND.(.NOT.HETEROGENEOUS)) THEN
         CALL TRANSFERHETERO(FLOWTOMECHANICSNONMATCHING,COPYARG)
         ELSE
         CALL TRANSFERHETERO(FLOWTOMECHANICS,COPYARG)
         ENDIF
         MODACT=15
         CALL TIMON(38)
         CALL UPDATE(N_PRESS,2)
         CALL TIMOFF(38)

C UPSCALE FLUID DENSITY FROM SINGLE PHASE FLOW BLOCK

      COPYARG(2)=N_EFLDEN
      COPYARG(6)=N_FLDEN
      MODACT=17
      IF(NONMATCHING.AND.HETEROGENEOUS) THEN ! SAUMIK, CMAME PAPER
      CALL TRANSFERHETERO(FLOWTOMECHANICSHETERO,COPYARG)
      ELSEIF(NONMATCHING.AND.(.NOT.HETEROGENEOUS)) THEN
      CALL TRANSFERHETERO(FLOWTOMECHANICSNONMATCHING,COPYARG)
      ELSE
      CALL TRANSFERHETERO(FLOWTOMECHANICS,COPYARG)
      ENDIF
      MODACT=15
      CALL TIMON(38)
      CALL UPDATE(N_EFLDEN,2)
      CALL TIMOFF(38)

C COMPUTE FLUID DENSITY ARISING OUT OF COMPOSITIONAL FLOW

C      MODACT=16
C      CALL ESETARYR8N(N_COMP_DEN,ZERO,1)
C      JBODY(1)=5
C      JBODY(2)=N_COMP_DEN
C      JBODY(3)=N_PV
C      JBODY(4)=N_PMD
C      JBODY(5)=N_SAT
C      JBODY(6)=N_EVOL
C      CALL CALLWORK(COMPDEN_3PH,JBODY)
C      CALL TIMON(38)
C      CALL UPDATE(N_COMP_DEN,2)
C      CALL TIMOFF(38)

C UPSCALE FLUID DENSITY FROM COMPOSITIONAL FLOW BLOCK

C      COPYARG(2)=N_BULK_DEN
C      COPYARG(6)=N_COMP_DEN
C      IF(NONMATCHING) THEN
C      CALL TRANSFERHETERO(FLOWTOMECHANICSNONMATCHING,COPYARG)
C      ELSE
C      CALL TRANSFERHETERO(FLOWTOMECHANICS,COPYARG)
C      ENDIF
C      MODACT=15
C      CALL TIMON(38)
C      CALL UPDATE(N_BULK_DEN,2)
C      CALL TIMOFF(38)

C ADD ROCK DENSITY TO UPSCALED FLUID DENSITY

C      JBODY(1)=2
C      JBODY(2)=N_BULK_DEN
C      JBODY(3)=N_ROCKD
C      CALL CALLWORK(ADD_ROCK_DEN,JBODY)
C      CALL TIMON(38)
C      CALL UPDATE(N_BULK_DEN,2)
C      CALL TIMOFF(38)
      ENDIF ! IF MBPOROE

C CALCULATE BODY FORCE DUE TO FLUID PRESSURE

      IF(PEFLOW.EQ.17.OR.MBPOROE) THEN
          JBODY(1) = 5
          JBODY(2) = N_ROCKD
          JBODY(3) = N_EPV_FLOW
          JBODY(4) = N_EFLDEN
          JBODY(5) = N_BULK_DEN
          JBODY(6) = N_EVOL
          CALL CALLWORK(BULKDEN_1PH,JBODY)
      ELSEIF(PEFLOW.EQ.18) THEN
          JBODY(1) = 7
          JBODY(2) = N_ROCKD
          JBODY(3) = N_EPV_FLOW
          JBODY(4) = N_BULK_DEN
          JBODY(5) = N_EVOL
          JBODY(6) = N_ECON(1)
          JBODY(7) = N_ECON(2)
          JBODY(8) = N_ESAT(1)
      ELSEIF(PEFLOW.EQ.16.AND.(.NOT.MBPOROE)) THEN
      ! SAUMIK,BGANIS
C            JBODY(1) = 6
C            JBODY(2) = N_BULK_DEN
C            JBODY(3) = N_EVOL
C            JBODY(4) = N_ROCKD
C            JBODY(5) = N_EPV_FLOW
C            JBODY(6) = N_EPMD
C            JBODY(7) = N_ESAT(1)
C            CALL CALLWORK(BULKDEN_3PH,JBODY)
      ENDIF
      CALL TIMON(38)
      CALL UPDATE(N_BULK_DEN,2)
      CALL TIMOFF(38)

      JCPY(1) = 2
      JCPY(2) = N_PRESS
      JCPY(3) = N_PREF
      CALL CALLWORK(CPYARYR8,JCPY)

C SETUP FRACTURE PROFILE

      CALL ESETUP_FRAC_PROFILE(NERR)

C SETUP COORDINATES, CONNECTIVITITY
C AND SOLVE MECHANICS SYSTEM HERE

      CALL ESETUP_POROHEX(0,KERR)
      CALL TIMON(38)
      CALL ENODE_UPDATE(N_EDISP,'R8')
      CALL TIMOFF(38)

      CALL POROHEX_POST_PRCSS(0,KERR)

      CALL TIMON(38)
      CALL UPDATE(N_NODE_WIDTH,4)
      CALL TIMOFF(38)

C COPY INITIAL VOLUMETRIC STRAIN TO VSTRAIN_INIT

      JCPY(1) = 2
      JCPY(2) = N_VSTRAIN
      JCPY(3) = N_VSTRAIN_INIT
      CALL CALLWORK(CPYARYR8,JCPY)

      IF(MBPOROE) THEN ! SAUMIK,BGANIS

C DOWNSCALE VOLUMETRIC STRAIN TO EVALUATE UPDATED CR

         COPYARG(2)=N_VSTRAIN
         COPYARG(6)=N_VSTRAIN
      MODACT=17
C      MODACT=16
         IF(NONMATCHING.AND.HETEROGENEOUS) THEN ! SAUMIK, CMAME PAPER
         CALL TRANSFERHETERO(MECHANICSTOFLOWHETERO,COPYARG)
         ELSEIF(NONMATCHING.AND.(.NOT.HETEROGENEOUS)) THEN
         CALL TRANSFERHETERO(MECHANICSTOFLOWNONMATCHING,COPYARG)
         ELSE
         CALL TRANSFERHETERO(MECHANICSTOFLOW,COPYARG)
         ENDIF
         CALL TIMON(38)
         CALL UPDATE(N_VSTRAIN,2)
         CALL TIMOFF(38)
         JCPY(1) = 2
         JCPY(2) = N_VSTRAIN
         JCPY(3) = N_VSTRAIN_INIT
         CALL CALLWORK(CPYARYR8,JCPY)
         CALL CALLWORK(EUPDATECR,[7,N_MODULFLOW,N_POISSFLOW,N_BIOTAFLOW,
     &     N_POR,N_CR,N_EVOL,N_VSTRAIN])
         CALL TIMON(38)
         CALL UPDATE(N_CR,2)
         CALL TIMOFF(38)
         MODACT=15
      ELSE
! SAUMIK - 02/11/17
         CALL CALLWORK(EUPDATECR,[8,N_MODUL,N_POISS,N_BIOTA,
     &     N_POR,N_ECR,N_EVOL,N_VSTRAIN,N_VSTRAIN_INIT])
         CALL TIMON(38)
         CALL UPDATE(N_ECR,2)
         CALL TIMOFF(38)
      ENDIF ! IF MBPOROE

      CALL TIMOFF(36)
      CALL TIMOFF(35)

C INITIAL VALUE OUTPUT

      CALL ESTDOUTA()

  51  FORMAT(/'ERR51: POROELASTIC OPTION NOT SETUP FOR 1D OR 2D CASE')
  52  FORMAT(/'ERROR: POROELASTIC OPTION ONLY SETUP FOR BLACKI MODEL')
  54  FORMAT(/'ERROR: ELASTIC LINEAR SOLVER')
      END


