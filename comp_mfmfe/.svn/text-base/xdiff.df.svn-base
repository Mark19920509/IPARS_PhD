C  XDIFF.F - DIFFUSION EVALUATION FOR GIVEN DIFFUSION TENSOR (ASSUME 
C            ONLY MOLECULAR COMPONENT PRESENTLY).
C  COMPOSITIONAL IMPEC MODEL

C  ROUTINES IN THIS MODULE:
C  SUBROUTINE XGETDISP(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
C                      KEYOUT,NBLK,PV,KROCK,SAT,XVEL,XDMAT)
C  CODE HISTORY:

C  SUNIL G. THOMAS  11/27/07   ALPHA VERSION (SEE Y.B. CHANG FOR REF.)
C  GURPREET SINGH   08/13/14   DIFFUSION-DISPERSION FOR MFMFE

C***********************************************************************
      SUBROUTINE XGETDISP(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                    KEYOUT,NBLK,PV,KROCK,XVEL,XDMAT)
C***********************************************************************
      IMPLICIT NONE
      INCLUDE 'xmodel.h'
C***********************************************************************
C  THIS ROUTINE EVALUATES DIFFUSION-DISPERSION TENSOR.
C  INPUT:
C      POR =     PORE VOLUME (CU-FT, REAL*4)
C      ROCK =    ROCK TYPE (INTEGER)
C      XVEL =    PHASE DARCY VELOCITY (LB/SQ-FT-DAY, REAL*8)
C  OUTPUT:
C      DMAT =    DIFFUSION/DISPERSION TENSOR (REAL*8)
C-----------------------------------------------------------------------
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,JL1V(KDIM),JL2V(KDIM),
     &        KEYOUT(IDIM,JDIM,KDIM),KROCK(IDIM,JDIM,KDIM),NBLK
      INTEGER I,IC,IPH,J,JL1,JL2,K,KR,LC
      REAL*8  PV(IDIM,JDIM,KDIM)
      REAL*8  XVEL(IDIM,JDIM,KDIM,NPH,3),
     &        XDMAT(IDIM,JDIM,KDIM,6,NCINPH)

C ------only mol. diff. implemented currently but dispersion is ready.
      DO K=KL1,KL2
         JL1=JL1V(K)
         JL2=JL2V(K)
         DO J=JL1,JL2
            DO I=IL1,IL2
               IF (KEYOUT(I,J,K)/=0) THEN
               DO IPH=1,NPH
                  DO IC=1,NC
                     LC=ICINPH(IC,IPH)
                     IF(LC == 0) CYCLE
                     KR=KROCK(I,J,K)
                     IF(KR > NXROCKS) THEN
                        STOP 'ERROR IN XGETDISP: NROCKS EXCEEDED !!'
                     ENDIF
                     XDMAT(I,J,K,1,LC) = XMDIFF(KR,IC,IPH) 
                     XDMAT(I,J,K,2,LC) = XMDIFF(KR,IC,IPH) 
                     XDMAT(I,J,K,3,LC) = XMDIFF(KR,IC,IPH)
                     XDMAT(I,J,K,4,LC) = 0.D0
                     XDMAT(I,J,K,5,LC) = 0.D0
                     XDMAT(I,J,K,6,LC) = 0.D0

                     IF((.NOT.XNO_LD).OR.(.NOT.XNO_TD)) THEN
                        WRITE(0,*) "WARNING IN XGETDISP: LONG./TRANS. 
     &                             DISPERSION NOT IMPLEMENTED YET !!"
                     ENDIF
                  END DO
               END DO
               ENDIF
            END DO
         END DO
      END DO

      RETURN
      END


C*********************************************************************
      SUBROUTINE XDIFF(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,
     &     JL2V,KL1,KL2,KEYOUT,NBLK,KEYOUTCR,VOLPROP,VOLDIM,
     &     FACEPROP,FACEDIM,DDINV,XC,YC,ZC,DDCOF,MOLFRAC,
     &     CRPHI0,PHI,COF,RESID)
C*********************************************************************
      IMPLICIT NONE
C
      include 'control.h'
      include 'xmodel.h'
C***********************************************************************
C  THIS ROUTINE EVALUATES CONTRIBUTION TO RESIDUAL FROM DIFFUSION-
C  -DISPERSION
C  INPUT: 
C      PV =      PV VOLUME (CU-FT, REAL*8)
C      CR =      ROCK COMPRESSIBILITY X PV0 (CU-FT, REAL*4)
C      DDINV =   INVERSE OF DIFFUSION-DISPERSION TENSOR
C      DDCOF =   AVGSAT*AVGDEN AT CELL FACES (REAL*8)
C      MOLFRAC = COMPONENT MOLE FRACTIONS IN EACH PHASE (REAL*8)
C  INPUT/OUTPUT:
C     RESID(I,J,K,IC) = RESIDUAL FOR RIGHT HAND SIDE (REAL*8)
C     COF(I,J,K,-13:13,IC) =  FLOW COEFFICIENTS IN (I,J,K,IC) MASS 
C                             CONSERVATION EQUATION (REAL*8)
C-----------------------------------------------------------------------
C
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V(KDIM),
     &     JL2V(KDIM),KL1,KL2,KEYOUT(IDIM,JDIM,KDIM),
     &     NBLK
      INTEGER KEYOUTCR(IDIM+1,JDIM+1,KDIM+1),
     &     VOLPROP(IDIM+1,JDIM+1,KDIM+1,8),
     &     VOLDIM(IDIM+1,JDIM+1,KDIM+1), 
     &     FACEPROP(IDIM+1,JDIM+1,KDIM+1,12),
     &     FACEDIM(IDIM+1,JDIM+1,KDIM+1)
      REAL*8 DDINV(3,3,8,IDIM,JDIM,KDIM,NCINPH),
     &     XC(IDIM+1,JDIM+1,KDIM+1),YC(IDIM+1,JDIM+1,KDIM+1),
     &     ZC(IDIM+1,JDIM+1,KDIM+1),DDCOF(IDIM,JDIM,KDIM,3,NPH),  
     &     MOLFRAC(IDIM,JDIM,KDIM,NCINPH),
     &     PHI(IDIM,JDIM,KDIM),COF(IDIM,JDIM,KDIM,-13:13,NC),
     &     RESID(IDIM,JDIM,KDIM,NC)
C
      INTEGER I,J,K,M,KR,IPH,IC,LC,VPROP(8),FPROP(12)
      REAL*8 PHIN(8),MFN(8,NCINPH),CRPHI0(IDIM,JDIM,KDIM),
     &       CRPHI0N(8)

C     IPH (WATER = 1, OIL = 2, GAS = 3)
    
C     
C LOOP OVER ALL VERTICES (I,J,K)
C
      DO K = KL1,KL2+1
      DO J = 1, JDIM+1
      DO I = IL1,IL2+1
      KR = KEYOUTCR(I,J,K)

      IF((KR.EQ.1).OR.(KR.EQ.2)) THEN

         DO M = 1, 8
            VPROP(M) = VOLPROP(I,J,K,M)
         ENDDO
         DO M = 1, 12
            FPROP(M) = FACEPROP(I,J,K,M)
         ENDDO
         CALL GETCORNERLOCAL(CRPHI0N,I,J,K,CRPHI0,IDIM,JDIM,
     &                         KDIM,VPROP)
         CALL GETCORNERLOCAL(PHIN,I,J,K,PHI,IDIM,JDIM,KDIM,VPROP)

         DO IPH = 1,NPH
         DO IC = 1,NC
           LC = ICINPH(IC,IPH)
           IF(LC==0) CYCLE
           CALL GETCORNERLOCAL(MFN(1,LC),I,J,K,MOLFRAC(1,1,1,LC)
     &                       ,IDIM,JDIM,KDIM,VPROP)
         ENDDO
         ENDDO
         CALL GETMATRHSDIFF(COF,RESID,I,J,K,CRPHI0N,PHIN,MFN,
     &               DDINV,DDCOF,VOLDIM(I,J,K),VPROP,FACEDIM(I,J,K),
     &               FPROP,IDIM,JDIM,KDIM,XC,YC,ZC,NBLK)

      ENDIF
      ENDDO
      ENDDO
      ENDDO

      RETURN
      END

C*********************************************************************
      SUBROUTINE GETMATRHSDIFF(COF,RESID,I,J,K,CRPHI0N,PHIN,
     &                 MFN,DDINV,DDCOF,VDIM,VPROP,FDIM,FPROP,
     &                 IDIM,JDIM,KDIM,XC,YC,ZC,NBLK)
C*********************************************************************
      IMPLICIT NONE
      include 'control.h'
      include 'xmodel.h'
CGUS ----
C  UPDATE LOCAL CONTRIBUTION OF DIFFUSION-DISPERSION (I,J,K) 
C  TO COF AND RESID
C  {CC} = CELL CENTER, {CF} = CELL FACE
C  COF = B'*(CR_{CC}*AVGDEN*AVGSAT_{CF})*AINV*B*GRAD(MOLFRAC}_{CF}
C  COF GETS ONLY DIAGONAL ENTRIES 
C  RESID = B'*(PV_{CC}*AVGDEN*AVGSAT_{CF})*AINV*B*GRAD(MOLFRAC}_{CF}
C --------------------------------------------------------------------
C
      INTEGER I,J,K,VDIM,VPROP(8),FDIM,FPROP(12),NBLK,IDIM,
     &        JDIM,KDIM,VINDEX(VDIM),FINDEX(FDIM)

      REAL*8 COF(IDIM,JDIM,KDIM,-13:13,NC),RESID(IDIM,JDIM,KDIM,NC),
     &       PHIN(8),MFN(8,NCINPH),DDINV(3,3,8,IDIM,JDIM,KDIM,NCINPH),
     &       DDCOF(IDIM,JDIM,KDIM,3,NPH),XC(IDIM+1,JDIM+1,KDIM+1),
     &       YC(IDIM+1,JDIM+1,KDIM+1),ZC(IDIM+1,JDIM+1,KDIM+1)
      
      REAL*8 LCOF(VDIM,VDIM,NC),LRHS(VDIM,NC),CRPHI0N(8)

      INTEGER IC,IPH

C GET VINDEX AND FINDEX FROM VPROP AND FPROP
      IF(FDIM.NE.0) THEN
      CALL GETDOFINDEX(I,J,K,VPROP,FPROP,VDIM,FDIM,VINDEX,FINDEX)

C LCOF = B'*(CR_{CC}*AVGDEN*AVGSAT_{CF})*AINV*B*GRAD(MOLFRAC}_{CF}
C LRHS = B'*(PV_{CC}*AVGDEN*AVGSAT_{CF})*AINV*B*GRAD(MOLFRAC}_{CF}
      CALL GETLCOFRHSDIFF(LCOF,LRHS,I,J,K,DDINV,FINDEX,
     &               VINDEX,VPROP,IDIM,JDIM,KDIM,FDIM,VDIM,
     &               DDCOF,CRPHI0N,PHIN,MFN)

C MULTIPLY LOCAL COF WITH DELTIM 
      DO IC = 1,NC
        CALL SCAMULMAT(DELTIM,LCOF(1,1,IC),VDIM,VDIM)
        CALL SCAMULMAT(DELTIM,LRHS(1,IC),VDIM,1)

C STORE LOCAL COF AND RESID TO GLOBAL COF AND RESID
        CALL STOREMATRIX(COF(1,1,1,-13,IC),IDIM,JDIM,KDIM,
     &                  I,J,K,LCOF(1,1,IC),VPROP,VINDEX,VDIM)
        CALL STORERHS(RESID(1,1,1,IC),LRHS(1,IC),VDIM,
     &                  VINDEX,IDIM,JDIM,KDIM,I,J,K,VPROP)
      ENDDO
      ENDIF

      RETURN
      END

C*********************************************************************
      SUBROUTINE GETLCOFRHSDIFF(LCOF,LRHS,I,J,K,DDINV,
     &          FINDEX,VINDEX,VPROP,IDIM,JDIM,KDIM,FDIM,VDIM,
     &          DDCOF,CRPHI0N,PHIN,MFN)
C*********************************************************************
      IMPLICIT NONE
      include 'xmodel.h'
C
C LTRAN ONLY CONTAINS PERMEABILITY NOT ANY OTHER VARIABLES
C
C
      INTEGER I,J,K,FDIM,VDIM,FINDEX(FDIM),VINDEX(VDIM),
     &        VPROP(8),IDIM,JDIM,KDIM
      REAL*8 LCOF(VDIM,VDIM,NC),LRHS(VDIM,NC),
     &       DDINV(3,3,8,IDIM,JDIM,KDIM,NCINPH),
     &       DDCOF(IDIM,JDIM,KDIM,3,NPH),PHIN(8),
     &       MFN(8,NCINPH),CRPHI0N(8)
C
      INTEGER IPIV(12),INFO,L,M,N,IC,IPH,LC
      REAL*8 A(FDIM,FDIM),B(FDIM,VDIM),LTRAN(FDIM,VDIM),
     &       UPMOB(FDIM),DUM
C
      LCOF  = 0.D0
      LRHS  = 0.D0
      UPMOB = 0.D0
C
C COMPUTE LOCAL B MATRIX (GRADIENT OF MOLFRAC)
C
      CALL GETB(B,FDIM,VDIM,FINDEX,VINDEX)
C
C COMPUTE VELOCITY MASS MATRIX STORE IN TEMPA
C
      DO IPH = 1,NPH
C
C GETUPMOB: (AVGSAT*AVGDEN) VALUES AT THE FDIM FACES
C
      CALL GETUPMOB(I,J,K,FDIM,FINDEX,DDCOF(1,1,1,1,IPH),
     &                IDIM,JDIM,KDIM,UPMOB)
      DO IC = 1,NC
      LC = ICINPH(IC,IPH)
      IF (LC==0) CYCLE
      CALL GETA(A,FDIM,I,J,K,FINDEX,IDIM,JDIM,KDIM,
     &          DDINV(1,1,1,1,1,1,LC),VPROP)
C
C COPY LTRAN TO B
C
      CALL COPYARYR8(B,LTRAN,FDIM*VDIM)
C
C LTRAN = TEMPA^(-1)*LTRAN = AINV * B, (TEMPA IS CHANGED)
C
C DGESV (LAPACK) INVERSION SUBROUTINE
C
      CALL DGESV(FDIM,VDIM,A,FDIM,IPIV,LTRAN,FDIM,INFO)
      IF (INFO.NE.0) THEN
          WRITE(*,*)'GETLCOFRHSDIFF: ERROR BLAS CANNOT INVERT'
          STOP
      ENDIF
C
C LCOF = B^T * LTRAN = B^T*AINV*B
C
      DO M=1,VDIM
      DO N=1,VDIM
      DO L=1,FDIM
         DUM = UPMOB(L)*B(L,M)*LTRAN(L,N)*
     &         MFN(VINDEX(N),LC)
         LCOF(M,M,IC) = LCOF(M,M,IC)+CRPHI0N(VINDEX(M))
     &                *DUM
         LRHS(M,IC) = LRHS(M,IC)+PHIN(VINDEX(M))
     &                *DUM
      ENDDO
      ENDDO
      ENDDO

      ENDDO
      ENDDO

      RETURN
      END
