C  ISTEP.F - MAKE ONE TIME STEP WITH THE BLACK OIL MODEL
C  ROUTINES IN THIS MODULE:

C  SUBROUTINE ISTEP1   (NERR)
C  SUBROUTINE ISTEP2   (KONVG,NERR)
C  SUBROUTINE ISTEP3   (KONVG,NERR)

C  CODE HISTORY:

C  JOHN WHEELER   7/25/97    INITIAL VERSION
C  Joe Eaton      8/26/97    Debug start
C  QIN LU        10/31/97    REVISED 3-PHASE EQUATION SYSTEM
C  QIN LU         11/7/97    IMPLEMENT "PRESSURE RELAXAION" WHEN
C                            SW<0 IN 3-PHASE SO THAT SW>=0 
C  QIN LU         8/22/98    CALL IBCINI() AND IBC_PROP() FOR MULTI-BLOCK,
C                            CALL IINFLUX() TO INCLUDE FLUXES ON FLOW
C                            BOUNDARY INTO MASS BALANCE CALCULATIONS
C  QIN LU         9/03/98    USE PO INSTEAD OF PW TO CALCULATE RELATED 
C                            OIL AND GAS PROPERTIES AND REEVALUATE JACOBIAN
C                            MATRIX,WHICH ENSURES MEANINGFUL SATURATIONS.
C                            DO NOT USE "PRESSURE RELAXATION" ANY MORE. 
C  QIN LU        12/18/98    ADD ROUTINE FLASH(). SET PROPER INITIAL GUESS
C                            FOR PHASE CHANGING TO ENSURE CONVERGENCE.    
C  MPeszynska     1/14/99    moved all the routines except istep() to iprop.df
c  MPeszynska     2/25/99    made units for well output to be stb/day
C  JOHN WHEELER   9/10/99    SPLIT STEP ROUTINE FOR MULTIMODEL
C*********************************************************************
      SUBROUTINE ISTEP1 (NERR)
C*********************************************************************

C  Black oil model exective routine to start a time step.
C  1.  Compute Jacobian and residual for Newtonian iteration.
C  2.  Start inter-block calculations.

C  NERR = ERROR KEY STEPPED BY ONE FOR EACH ERROR
C         (INPUT AND OUTPUT, INTEGER)

C*********************************************************************
$POWER      INCLUDE 'msjunk.h'

      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
      INCLUDE 'wells.h'

      INCLUDE 'iarydat.h'
      INCLUDE 'ibaldat.h'

      INTEGER JPROP(21),JTRAN(14),JWSUM(9),JIWEL(13)
$YGMRES     &         ,JTRANYV(11)

      DATA JPROP / 21*0 /, JTRAN / 14*0 /, JWSUM / 9*0 /, 
     &     JIWEL / 13*0 /
$YGMRES     &    ,JTRANYV / 11*0 /

      LOGICAL ONCEONLY
      DATA ONCEONLY /.TRUE./

      EXTERNAL IPROP,ITRANX,ITRANY,ITRANZ,IWELSUMS,IBWELL
$YGMRES      EXTERNAL ISPRB3X,ISPRB3Y,ISPRB3Z

C  DEFINE WORK ROUTINE ARGUMENTS 

      IF (ONCEONLY) THEN
         ONCEONLY=.FALSE.

         IF (LEVELE.AND.BUGKEY(1)) WRITE (NFBUG,*)'PROC',MYPRC,
     &    ' ENTERING SUBROUTINE ISTEP1, OLD TAG =',MSGTAG($IMODEL+1)

         JPROP(1)=20
         JPROP(2)=N_POR
         JPROP(3)=N_POIL
         JPROP(4)=N_PWAT
         JPROP(5)=N_PGAS
         JPROP(6)=N_OIL
         JPROP(7)=N_GAS
         JPROP(8)=N_TRNDAT
         JPROP(9)=N_DUNK
         JPROP(10)=N_COF
         JPROP(11)=N_RESID
         JPROP(12)=N_ROCK
         JPROP(13)=N_SGAS
         JPROP(14)=N_DGRO
         JPROP(15)=N_TLAMB
         JPROP(16)=N_SGASN
         JPROP(17)=N_POILN
         JPROP(18)=N_OILN
         JPROP(19)=N_GASN
         JPROP(20)=N_WATN
         JPROP(21)=N_RHO

         JTRAN(1)=13
         JTRAN(3)=N_DEPTH
         JTRAN(4)=N_POIL
         JTRAN(5)=N_PWAT
         JTRAN(6)=N_PGAS
         JTRAN(7)=N_OIL
         JTRAN(8)=N_DUNK
         JTRAN(9)=N_TRNDAT
         JTRAN(10)=N_COF
         JTRAN(11)=N_RESID
         JTRAN(12)=N_DGRO
         JTRAN(13)=N_TLAMB
         JTRAN(14)=N_SGAS

$YGMRES         JTRANYV(1)=10
$YGMRES         JTRANYV(3)=N_DEPTH
$YGMRES         JTRANYV(4)=N_POIL
$YGMRES         JTRANYV(5)=N_PWAT
$YGMRES         JTRANYV(6)=N_PGAS
$YGMRES         JTRANYV(7)=N_DUNK
$YGMRES         JTRANYV(8)=N_TRNDAT
$YGMRES         JTRANYV(9)=N_COF
$YGMRES         JTRANYV(10)=N_RESID
$YGMRES         JTRANYV(11)=N_TLAMB

         JWSUM(1)=8
         JWSUM(2)=N_DEPTH
         JWSUM(3)=N_POIL
         JWSUM(4)=N_PWAT
         JWSUM(5)=N_PGAS
         JWSUM(6)=N_DUNK
         JWSUM(7)=N_TLAMB
         JWSUM(8)=N_DGRO
         JWSUM(9)=N_SGAS

         JIWEL(1)=12
         JIWEL(2)=N_DEPTH
         JIWEL(3)=N_POIL
         JIWEL(4)=N_PWAT
         JIWEL(5)=N_PGAS
         JIWEL(6)=N_TRNDAT
         JIWEL(7)=N_DUNK
         JIWEL(8)=N_TLAMB
         JIWEL(9)=N_DGRO
         JIWEL(10)=N_COF
         JIWEL(11)=N_SGAS
         JIWEL(12)=N_RESID
         JIWEL(13)=N_OIL
      ENDIF

C  EVALUATE PHYSICAL PARAMETERS AND ACCUMULATION TERMS
C  COMPUTE JACOBIAN (ACCUMULATION PART)

      DO  L=1,3
      CURRENT(L)=0.D0
      ENDDO
      NERRC=0
      CALL TIMON(20)
      CALL CALLWORK(IPROP,JPROP)
      CALL TIMOFF(20)

      IF((NHISUSE == 0).AND.(NSTEP < 1)) GO TO 9

      IF (NERRC.GT.0) THEN
         NERR=NERR+1
         RETURN
      ENDIF

      IF (NEWT.EQ.1.AND.TIM.EQ.0.D0) THEN
         BALANCE(1,MODACT,4)=CURRENT(1)
         BALANCE(2,MODACT,4)=CURRENT(2)
         BALANCE(3,MODACT,4)=CURRENT(3)
      ENDIF

C  EXCHANGE PHYSICAL PARAMETERS WITH NEIGHBORING PROCESSORS

$MANY      CALL TIMON(22)

$MANY      CALL UPDATE(N_POIL,1)
$MANY      CALL UPDATE(N_PWAT,1)
$MANY      CALL UPDATE(N_PGAS,1)
$MANY      CALL UPDATE(N_OIL,1)
$MANY      CALL UPDATE(N_TRNDAT,1)
$MANY      CALL UPDATE(N_DUNK,1)
$MANY      CALL UPDATE(N_DGRO,1)
$MANY      CALL UPDATE(N_TLAMB,1)
$MANY      CALL UPDATE(N_SGAS,1)

$MANY      CALL TIMOFF(22)

C  EVALUATE TRANSPORT TERMS IN JACOBIAN AND RESIDUAL

      CALL TIMON(21)
      JTRAN(2)=N_TCOFX
$YGMRES      JTRANYV(2)=N_TCOFX
      CALL CALLWORK(ITRANX,JTRAN)
$YGMRES         CALL CALLISPRB3(ISPRB3X,JTRANYV)
      JTRAN(2)=N_TCOFY
$YGMRES      JTRANYV(2)=N_TCOFY
      CALL CALLWORK(ITRANY,JTRAN)
$YGMRES         CALL CALLISPRB3(ISPRB3Y,JTRANYV)
      JTRAN(2)=N_TCOFZ
$YGMRES      JTRANYV(2)=N_TCOFZ
      CALL CALLWORK(ITRANZ,JTRAN)
$YGMRES         CALL CALLISPRB3(ISPRB3Z,JTRANYV)
      CALL TIMOFF(21)

C  EVALUATE WELL CONDITIONS

    9 CONTINUE

      CALL TIMON(10)

      DO N=1,NUMWEL
         DO IV=1,7
            WELIPC(IV,N)=0.D0
         ENDDO
         DO IV=1,21      
            WELVEC(IV,N)=0.D0
         ENDDO
      ENDDO

      CALL CALLWORK(IWELSUMS,JWSUM)

$MANY      CALL TIMON(23)
$MANY      DO 1 N=1,NUMWEL
$MANY      IF (MODWEL(N).EQ.MODACT
$MANY$TRCHEM     &        .OR.MODACT.EQ.FLOWMODEL
$MANY     &        ) THEN
$MANY         CALL WELSUM(N,18,WELVEC(1,N))
$MANY      ENDIF
$MANY    1 CONTINUE                
$MANY      CALL TIMOFF(23)

      CALL CALLWORK(IBWELL,JIWEL)
      IF (NERRC.GT.0) GO TO 1313

      CALL TIMOFF(10)

      IF((NHISUSE == 0).AND.(NSTEP < 1)) RETURN

C  SEND BLOCK INTERFACE DATA

$DUAL      CALL IDUALS()
      RETURN

 1313    NERR=NERR+1

      END
C*********************************************************************
      SUBROUTINE ISTEP2 (KONVG,NERR)
C*********************************************************************

C  Black oil model exective routine to continue a time step
C  1.  Complete inter-block calculations
C  2.  Check Newtonian convergence

C  NERR = ERROR KEY STEPPED BY ONE FOR EACH ERROR
C         (INPUT AND OUTPUT, INTEGER)

C  KONVG = CONVERGENCE FLAG (OUTPUT, INTEGER)
C        = 1 ==> CONVERGED
C        = 2 ==> CONTINUE ITERATION
C        = 3 ==> FAILED
C        = 4 ==> CUT TIME STEP (SET BY FRAMEWORK ONLY)

C*********************************************************************
$POWER      INCLUDE 'msjunk.h'

      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
      INCLUDE 'wells.h'
      INCLUDE 'layout.h'

      INCLUDE 'iarydat.h'
      INCLUDE 'ibaldat.h'

      INTEGER JMRSD(2),JBUGO(16)

      DATA JBUGO / 16*0 /, JMRSD / 2*0 /

      LOGICAL ONCEONLY
      DATA ONCEONLY /.TRUE./,NUMBUG6/0/

      EXTERNAL IBUGOUT,IMAXRESID

      IF((NHISUSE == 0).AND.(NSTEP < 1)) RETURN

C  DEFINE WORK ROUTINE ARGUMENTS 

      IF (ONCEONLY) THEN
         ONCEONLY=.FALSE.

         IF (LEVELE.AND.BUGKEY(1)) WRITE (NFBUG,*)'PROC',MYPRC,
     &    ' ENTERING SUBROUTINE ISTEP2, OLD TAG =',MSGTAG($IMODEL+1)

         JBUGO(1)=15
         JBUGO(2)=N_POR
         JBUGO(3)=N_PWAT
         JBUGO(4)=N_POIL
         JBUGO(5)=N_PGAS
         JBUGO(6)=N_OIL
         JBUGO(7)=N_GAS
         JBUGO(8)=N_DUNK
         JBUGO(9)=N_COF
         JBUGO(10)=N_RESID
         JBUGO(11)=N_ROCK
         JBUGO(12)=N_TCOFX
         JBUGO(13)=N_TCOFY
         JBUGO(14)=N_TCOFZ
         JBUGO(15)=N_TLAMB
         JBUGO(16)=N_TRNDAT

         JMRSD(1)=1
         JMRSD(2)=N_RESID
         
      ENDIF

C  RECEIVE BLOCK INTERFACE DATA AND COMPLETE RESIDUALS

      FLUXOM(1)=0.D0
      FLUXOM(2)=0.D0
      FLUXOM(3)=0.D0
$DUAL      CALL IDUALR()

C  DEBUG OUTPUT

      IF (BUGKEY(6).AND.(NEWT.LT.3).AND.(NUMBUG6.LT.9/NUMBLK)) THEN
         CALL CALLWORK(IBUGOUT,JBUGO)
         NUMBUG6=NUMBUG6+1
         IF (LEVELC) THEN
            DO 1 IW=1,NUMWEL
            IF (MODWEL(IW).EQ.MODACT
$TRCHEM     &          .OR.MODACT.EQ.FLOWMODEL
     &         )
     &         WRITE (NFBUG,2) IW,(WELIPC(I,IW),I=1,7)
    1       CONTINUE
         ENDIF
    2    FORMAT(' WELL',I3,' QOI',G11.4,' QOP',G11.4,' QWI',G11.4,
     &    ' QWP',G11.4/' QGI',G11.4,' QGP',G11.4,' BHP',F8.2)
      ENDIF
 
C  CHECK NEWTONIAN CONVERGENCE

      DO I=1,3
         RESIDM(I)=0.D0
         RESIDT(I)=0.D0
      ENDDO
      KONVG=2
      IF (NEWT.EQ.1) THEN
         CVTOL2=.33D0*(BALANCE(1,MODACT,4)+BALANCE(2,MODACT,4)
     &      +BALANCE(3,MODACT,4))*CVTOL
         CVTOL1=3.D0*CVTOL2/NEMOD($IMODEL)
      ELSE
         CALL CALLWORK(IMAXRESID,JMRSD) 

$MANY         CALL MAXIT(3,RESIDM)
$MANY         CALL SPREAD8(3,RESIDM)
$MANY         CALL SUMIT(3,RESIDT)
$MANY         CALL SPREAD8(3,RESIDT)

         IF (NEWT.LE.MAXITS) THEN
C           IF (NEWT.GT.2          !GXLCRR  12/08/02
            IF (RESIDM(1).LT.CVTOL1.AND.ABS(RESIDT(1)).LT.CVTOL2
     &         .AND.RESIDM(2).LT.CVTOL1.AND.ABS(RESIDT(2)).LT.CVTOL2
     &         .AND.RESIDM(3).LT.CVTOL1.AND.ABS(RESIDT(3)).LT.CVTOL2)
     &         KONVG=1
         ELSE
            IF (RESIDM(1).LT.5.D0*CVTOL1
     &         .AND.ABS(RESIDT(1)).LT.5.D0*CVTOL2
     &         .AND.RESIDM(2).LT.5.D0*CVTOL1
     &         .AND.ABS(RESIDT(2)).LT.5.D0*CVTOL2
     &         .AND.RESIDM(3).LT.5.D0*CVTOL1
     &         .AND.ABS(RESIDT(3)).LT.5.D0*CVTOL2) THEN
               KONVG=1
            ELSE
               KONVG=3
            ENDIF
         ENDIF
      ENDIF

C  TRACE AND SCREEN OUTPUT

      IF (BUGKEY(7)) THEN
         WRITE (NFBUG,14) NEWT-1,MODACT,MYPRC,RESIDM(1),RESIDM(2),
     &   RESIDM(3),RESIDT(1),RESIDT(2),RESIDT(3)
         WRITE (*,14) NEWT-1,MODACT,MYPRC,RESIDM(1),RESIDM(2),
     &   RESIDM(3),RESIDT(1),RESIDT(2),RESIDT(3)
   14    FORMAT(' NEWT',I3,' MOD',I3,' PROC',I3,' Rom',G10.3,' Rwm',
     &    G10.3,' Rgm', G10.3,' Rot',G10.3,' RWt', G10.3,' RGt',G10.3)
      ENDIF    

      END
C*********************************************************************
      SUBROUTINE ISTEP3 (KONVG,NERR)
C*********************************************************************

C  Black oil model exective routine to complete a time step
C    1.  Update unknowns for next Newtonian iteration (KONVG = 2)
C    2.  Wrap up time step (KONVG = 1)
C    3.  Restart time step (KONVG = 4)
C    4.  Abort time step  (KONVG = 3)

C  KONVG = CONVERGENCE FLAG (INPUT, INTEGER)
C        = 1 ==> CONVERGED
C        = 2 ==> CONTINUE ITERATION
C        = 3 ==> FAILED
C        = 4 ==> CUT TIME STEP

C  NERR = ERROR KEY STEPPED BY ONE FOR EACH ERROR
C         (INPUT AND OUTPUT, INTEGER)

C*********************************************************************
$POWER      INCLUDE 'msjunk.h'

      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
      INCLUDE 'wells.h'
      INCLUDE 'unitsex.h'

      INCLUDE 'iarydat.h'
      INCLUDE 'ibaldat.h'
      INCLUDE 'ifluid.h'

      INTEGER JUP(7),JCOPY(3)

      REAL*8 WELISW,WELISO,WELISG,DUB,CVMWW,CVMWO,CVMWG,FNEWTO

      DATA JUP / 7*0 /, JCOPY / 3*0 /

      LOGICAL ONCEONLY
      DATA ONCEONLY /.TRUE./

      EXTERNAL IUPSOL1,IUPSOL2,CPYARYR8,CPYARYR4

      IF((NHISUSE == 0).AND.(NSTEP < 1)) GO TO 1

C  DEFINE WORK ROUTINE ARGUMENTS 

      IF (ONCEONLY) THEN
         ONCEONLY=.FALSE.

         IF (LEVELE.AND.BUGKEY(1)) WRITE (NFBUG,*)'PROC',MYPRC,
     &    ' ENTERING SUBROUTINE ISTEP3, OLD TAG =',MSGTAG($IMODEL+1)

         JUP(2)=N_POIL
         JUP(3)=N_OIL
         JUP(4)=N_GAS
         JUP(5)=N_DUNK
         JUP(6)=N_SGAS
         JUP(7)=N_DGRO

      ENDIF

C  BRANCH ON CONVERGENCE STATE

      GO TO (1,2,1,4),KONVG

C  CONTINUE NEWTONIAN ITERATION

    2 IF (BUGKEY(6).AND.NEWT.LT.3) THEN
         TITU='CHANGE IN OIL PRESSURE FOR FAULT BLOCK'
         CALL GEAOUT(N_DUNK,1,1)
         TITU='CHANGE IN OIL CONCENTRATION FOR FAULT BLOCK'
         CALL GEAOUT(N_DUNK,2,1)
         TITU='CHANGE IN GAS CONCENTRATION FOR FAULT BLOCK'
         CALL GEAOUT(N_DUNK,3,1)
      ENDIF

C  UPDATE SOLUTION AND RETURN

      FNEWTO=FNEWT
      FNEWT=1.D0
      IF (NEWT.GT.3) THEN
         IF (FNEWTO.LT..6D0) THEN
            IF (RESIDM(1).GT.RESDMO(1).OR.RESIDM(2).GT.
     &         RESDMO(2).OR.RESIDM(3).GT.RESDMO(3)) FNEWT=.5D0
         ELSE
            IF (RESIDM(1).GT.4.D0*RESDMO(1).OR.RESIDM(2).GT.4.D0*
     &         RESDMO(2).OR.RESIDM(3).GT.4.D0*RESDMO(3)) FNEWT=.5D0
         ENDIF
      ENDIF
      IF (NEWT.GT.1.AND.FNEWT.GT.FNEWTO+.5D0) FNEWT=FNEWTO+.5D0
      RESDMO(1)=RESIDM(1)
      RESDMO(2)=RESIDM(2)
      RESDMO(3)=RESIDM(3)
      NERRC=0
      JUP(1)=6
C     CALL CALLWORK(IUPSOL1,JUP)  !GXL COMMENT OFF
      IF (NERRC.GT.0) THEN
         NERR=NERR+1
         RETURN
      ENDIF

$MANY      FNEWT=1.D0/FNEWT
$MANY      CALL MAXIT(1,FNEWT)
$MANY      CALL SPREAD8(1,FNEWT)
$MANY      FNEWT=1.D0/FNEWT

      IF (BUGKEY(6).AND.LEVELC) WRITE (NFOUT,7) FNEWT
    7 FORMAT(/' NEWTONIAN CONSTRAINT FACTOR =',F10.5)

      JUP(1)=4
      CALL CALLWORK(IUPSOL2,JUP)

C  UPDATE BOTTOM HOLE PRESSURE FOR RATE CONTROLED WELLS

      DO 30 IW=1,NUMWEL
      IF ((MODWEL(IW).EQ.MODACT
$TRCHEM      &  .OR.MODACT.EQ.FLOWMODEL
     &    ).AND.LINSYSW(IW).GT.0) THEN
         WELBHP(IW)=WELBHP(IW)+DWELBHP(IW)
         WELDEN(IW)=WELDEN(IW)+DWELDEN(IW)
      ENDIF
  30  CONTINUE

      RETURN

C  NEWTONIAN ITERATION CONVERGED OR FAILED
C  UPDATE WELL DATA AND BALANCES AT END OF TIME STEP

    1 CONTINUE

$MANY      CALL TIMON(23)
$MANY      DO 11 N=1,NUMWEL
$MANY      IF (MODWEL(N).EQ.MODACT
$MANY$TRCHEM     &        .OR.MODACT.EQ.FLOWMODEL
$MANY     &        ) CALL WELSUM(N,6,WELIPC(1,N))
$MANY   11 CONTINUE
$MANY      CALL WELGET(7,WELIPC)
$MANY      CALL TIMOFF(23)

      IF (MYPRC.EQ.0) THEN

         WELISW=0.D0
         WELISO=0.D0
         WELISG=0.D0

         CVMWW=CVMWELWB/DELTIM
         CVMWO=CVMWELOB/DELTIM
         CVMWG=CVMWELGB/DELTIM

         DO 9 N=1,NUMWEL
         IF (MODWEL(N).EQ.MODACT
$TRCHEM     &      .OR.MODACT.EQ.FLOWMODEL
     &      ) THEN
            WELTOT(1,N)=WELTOT(1,N)+WELIPC(1,N)
            WELTOT(2,N)=WELTOT(2,N)+WELIPC(2,N)
            WELTOT(3,N)=WELTOT(3,N)+WELIPC(3,N)
            WELTOT(4,N)=WELTOT(4,N)+WELIPC(4,N)
            WELTOT(5,N)=WELTOT(5,N)+WELIPC(5,N)
            WELTOT(6,N)=WELTOT(6,N)+WELIPC(6,N)

            IF (KWELL(N).LT.31) THEN
               IF (KWELL(N).EQ.1.OR.KWELL(N).EQ.2)
     &            CALL WELLOUT (N,1,WELIPC(3,N)*CVMWW)
               IF (KWELL(N).EQ.3.OR.KWELL(N).EQ.4)
     &            CALL WELLOUT (N,8,WELIPC(5,N)*CVMWG)
            ELSE
               CALL WELLOUT (N,2,WELIPC(2,N)*CVMWO)
               CALL WELLOUT (N,3,WELIPC(4,N)*CVMWW)
               CALL WELLOUT (N,4,WELIPC(6,N)*CVMWG)
               DUB=0.D0
               IF(WELIPC(2,N).NE.0.D0) DUB=(WELIPC(4,N)*CVMWW)
     &            /(WELIPC(2,N)*CVMWO)
               CALL WELLOUT (N,5,DUB)
               DUB=0.D0
               IF (WELIPC(2,N).NE.0.D0) DUB=(WELIPC(6,N)*CVMWG)
     &            /(WELIPC(2,N)*CVMWO)
               CALL WELLOUT (N,6,DUB)
            ENDIF
            IF (KWELL(N).NE.1.AND.KWELL(N).NE.31.AND.KWELL(N).NE.3)
     &         CALL WELLOUT (N,7,WELIPC(7,N))

            WELISO=WELISO+WELIPC(1,N)-WELIPC(2,N)
            WELISG=WELISG+WELIPC(5,N)-WELIPC(6,N)
            WELISW=WELISW+WELIPC(3,N)-WELIPC(4,N)

         ENDIF
    9    CONTINUE

         IF((NHISUSE == 0).AND.(NSTEP < 1)) RETURN

         BALANCE(1,MODACT,2)=WELISO
         BALANCE(2,MODACT,2)=WELISW
         BALANCE(3,MODACT,2)=WELISG

         IF (BUGKEY(7)) THEN
            DO 14 IW=1,NUMWEL
            IF (MODWEL(IW).EQ.MODACT
$TRCHEM      &        .OR.MODACT.EQ.FLOWMODEL
     &         ) WRITE (NFOUT,15) IW,
     &         (WELTOT(I,IW),I=1,6)
   14       CONTINUE
   15       FORMAT(' WELL',I4,' QOI=',G12.5,' QOP=',G12.5,' QWI=',
     &         G12.5/' QWP=',G12.5,' QGI=',G12.5,' QGP=',G12.5)
         ENDIF
      ENDIF
      IF((NHISUSE == 0).AND.(NSTEP < 1)) RETURN

      BALANCE(1,MODACT,1)=CURRENT(1)
      BALANCE(2,MODACT,1)=CURRENT(2)
      BALANCE(3,MODACT,1)=CURRENT(3)
      BALANCE(1,MODACT,3)=FLUXOM(1)
      BALANCE(2,MODACT,3)=FLUXOM(2)
      BALANCE(3,MODACT,3)=FLUXOM(3)

      RETURN

C  TIME STEP CUT

    4 JCOPY(1)=2
      JCOPY(2)=N_POILN
      JCOPY(3)=N_POIL
      CALL CALLWORK(CPYARYR8,JCOPY)
      JCOPY(2)=N_OILN
      JCOPY(3)=N_OIL
      CALL CALLWORK(CPYARYR8,JCOPY)
      JCOPY(2)=N_GASN
      JCOPY(3)=N_GAS
      CALL CALLWORK(CPYARYR8,JCOPY)
      JCOPY(2)=N_SGASN
      JCOPY(3)=N_SGAS
      CALL CALLWORK(CPYARYR4,JCOPY)

      END
