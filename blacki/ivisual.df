C  IVISUAL.F - PRINT BLACK OIL MODEL visualization data

C  ROUTINES IN THIS MODULE:

c  SUBROUTINE IVIS_TRANSL(scalar,num,name) 
C  SUBROUTINE IVELCOMP() - compute velocities 
c  subroutine ivis_init() - interface to the framework vis init
c                             routines
c  subroutine ivis_output() - interface to the framework vis_output
c                               routines

C  CODE HISTORY:

C  Malgo Peszynska  2/17/98     computation and output of velocities
C  Malgo Peszynska  3/26/98     put in ivis_init, ivis_output
c  Malgo Peszynska, 5/27/98     put in IVIS_TRANSL, modified the other
c     routines to be controlled by the data file
c  MPeszynska,      9/25/98    modifed the routines below to 
c     include changes in framework routines, see visout.df for details
C  S. G. Thomas,    9/25/09,   mods for streamlining vis options
c     
c *********************************************************************
      SUBROUTINE IVIS_TRANSL(scalar,num,name)
c ---------------------------------------------
c lookup the <name> in the glossary for the model
c which is read from ivisual.h
c ---- for different models: copy the routine, change the include file
c 
c set vis_varnames, vis_offsets and vis_ipars_vars:
c
c vis_varnames: the names that will be put in the Tecplot file
c vis_ipars_names: the names that are "official" to IPARS
c vis_offsets: the offsest as decided in IPARS
c --------------
c if not in glossary, copy names verbatim, set offset to 1 (default)
c ---------------------------------------------
      implicit none
c parameters      
      character*$MXANAM name
      integer num
      logical scalar

c includes
      include 'visual.h'
      include 'ivisual.h'

c local variables
      integer i,k,nnum
c -----------------------------------------------------------
      if (scalar) then
c -----------------------------
         vis_varnames(num) = name
         vis_offsets(num) = 1
         vis_ipars_names (num ) = name

         do i=1,ipars_nscl
            if (ipars_scl_names(1,i).eq.name) then

               vis_varnames(num) = ipars_scl_names(2,i)
               vis_ipars_names (num) = ipars_scl_names(3,i)
               vis_offsets (num) = ipars_scl_offsets(i)
            endif
         enddo
         call vis_arynum(num)

      else 
c ---------------------------------
c vector case : 
         do k=1,3             
            nnum = vis_scl + (num-1)*3 +k
            vis_varnames( nnum ) = name
            vis_offsets( nnum  ) = 1            
            vis_ipars_names (nnum) = name
         enddo

         do i=1,ipars_nvec
            if (ipars_vec_names(1,i).eq.name) then
               do k=1,3
                  nnum = vis_scl + (num-1)*3 +k
                  vis_varnames(nnum) = ipars_vec_names(1+k,i)
                  vis_ipars_names(nnum) = ipars_vec_names(4+k,i)
                  vis_offsets (nnum) = ipars_vec_offsets(k,i)
               enddo
            endif
         enddo
         do k=1,3             
            nnum = vis_scl + (num-1)*3 +k
            call vis_arynum(nnum)
         enddo
 
      endif

      end

C ==================================================================
       SUBROUTINE Ivelcomp(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                   KL2,KEYOUT,NBLK,TCOFX,TCOFY,TCOFZ,DEPTH,POIL,
     &                   PWAT,PGAS,RHO,TLAMB,DGRO,VEL,VMO,VMW,VMG)
C ------------------------------------------------------------------
C computes velocities (fluxes) associated with faces 1,2,3 (x,y,z) of
C each gridblock, for each phase 1,2,3 (oil,water,gas)
C put the values in the VEL grid array
C VEL(i,j,k,iphase,1) for example contains the value of 
C velocity for phase iphase on tha face of location i-1/2,j,k 
C-------------------------------------------------------------------
      implicit none  
      integer idim,jdim,kdim,ldim,il1,il2,nblk,kl1,kl2

      integer ierr,jl1,i1,j1,k1
      real*8 g2,dd,dgrav,dens1,dens2

$POWER       include 'msjunk.h'

      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'ifluid.h'

      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 TCOFX(IDIM,JDIM,KDIM),       TCOFY(IDIM,JDIM,KDIM),
     &       TCOFZ(IDIM,JDIM,KDIM),       DEPTH(IDIM,JDIM,KDIM),
     &       POIL(IDIM,JDIM,KDIM),        PWAT(IDIM,JDIM,KDIM),
     &       PGAS(IDIM,JDIM,KDIM),        RHO(IDIM,JDIM,KDIM,3),
     &       TLAMB(IDIM,JDIM,KDIM,3),     DGRO(IDIM,JDIM,KDIM),
     &       VEL(IDIM,JDIM,KDIM,3,3),
     &       VMO(IDIM,JDIM,KDIM),       VMW(IDIM,JDIM,KDIM),
     &       VMG(IDIM,JDIM,KDIM)

C -------------------------------------------------------------
        integer i,j,k,jlp,ilp,klp,mkey1,mkey
        integer iphase, iface, mioff, mjoff, mkoff
        integer ioff,joff,koff
        real*8 dx,dy,dz,dp,RO

        INTEGER OIL,WATER,GAS

        PARAMETER (OIL=1,WATER=2,GAS=3)

c ----------------------------------------------
c     get the global offsets for dx,dy,dz
      call blkoff(nblk,ioff,joff,koff,ierr)
      if(ierr.ne.0) return
c -------------------------------------------------------------        
      klp=kl2+1
      ilp=il2+1
      G2=.5D0*GRAV

C --------------------------- main LOOP over faces and phases ---

      do iface=1,3
         mioff=0
         mjoff=0
         mkoff=0
         if (iface.eq.1) mioff=1
         if (iface.eq.2) mjoff=1
         if (iface.eq.3) mkoff=1

      DO iphase=1,3
         
      DO K=KL1,KL2+mkoff
         if (k.eq.kl1)then
            JL1=JL1V(K)
            JLP=JL2V(K)+mjoff
         else if( k.le.kl2) then
            JL1=min(JL1V(K-1) , JL1V(K))
            JLP=max(JL2V(K-1), JL2V(K))+mjoff
         else
            JL1=JL1V(Kl2)
            JLP=JL2V(Kl2)
         endif
      DO J=JL1,JLP
      DO I=IL1,IL2+mioff

         i1=i-mioff
         j1=j-mjoff
         k1=k-mkoff
         
         mkey=keyout(i,j,k)
         mkey1=keyout(i1,j1,k1)
         
C     INNER face
         if(mkey.eq.1.and.mkey1.eq.1) go to 4
C     GHOST face
         if ( ( (mkey.eq.-1).and.(mkey1.eq.1) ).or.
     &        ( (mkey.eq.1).and.(mkey1.eq.-1) ) ) go to 4
C     BDARY face: these are set to zero and recomputed
c     in BC_VELCOMP
         if ( (mkey.eq.0.and.mkey1.eq.1) .or. 
     &        (mkey.eq.1.and.mkey1.eq.0) )   go to 1
C     ELSE: do not compute 
         go to 1
         
C     --------------------------
C
C     beginning of actual computation for velocity (i,j,k) 
C
C----------------------------
 4       continue
C     DD is the difference in depths
         
         DD=(depth(i,j,k)-depth(i1,j1,k1))*G2
         
C     DP is difference  of pressures
C     DP=Pphase2-Pphase1
         
         if (iphase.eq.oil) DP=POIL(i,j,k)-POIL(i1,j1,k1)
         if (iphase.eq.water) DP=PWAT(i,j,k)-PWAT(i1,j1,k1)
         if (iphase.eq.gas) DP=PGAS(i,j,k)-PGAS(i1,j1,k1)
         
C Compute Dgrav : gravity component from Darcy law
C =0.0 for gas velocity if there is no gas in either
C of the cells
         DGRAV=0.D0
         DENS1=RHO(i1,j1,k1,iphase)
         DENS2=RHO(i,j,k,iphase)
         if (iphase.ne.gas) then
            DGRAV=DD*(DENS1+DENS2)
         else
            if (DENS1.ne.0.D0.and.DENS2.ne.0.D0) then
               Dgrav=DD*(DENS1+DENS2)
            else 
               if (dens1.ne.0.D0) then
                  DGRAV=2.D0*DD*DENS1
               endif
               if (DENS2.ne.0.D0) then
                  DGRAV=2.D0*DD*DENS2
               endif
            endif
         endif
         DP=DP-DGRAV
C DP now contains the Darcy differences

C Compute the Darcy gradient 
                                  
         dx=dxrec(i+ioff,nblk) 
         dy=dyrec(j+joff,nblk)
         dz=dzrec(k+koff,nblk)
         
         if(iface.eq.1) DP=-DP*TCOFX(i,j,k) / (dy*dz) 
         if(iface.eq.2) DP=-DP*TCOFY(i,j,k) / (dx*dz)
         if(iface.eq.3) DP=-DP*TCOFZ(i,j,k) / (dx*dy)
         
C Compute vel=gradient multiplied by Lambda
C in an upwinding way

         IF (DP.GT.0.D0) THEN
            if (iphase.eq.water) then
               vel(i,j,k,iphase,iface)=DP*TLAMB(i1,j1,k1,iphase)
            endif  
            if (iphase.eq.oil) then
               vel(i,j,k,iphase,iface)=DP*TLAMB(i1,j1,k1,iphase)
               RO = DGRO(i1,j1,k1)
               vel(i,j,k,gas,iface) = RO*vel(i1,j1,k1,oil,iface)
            endif  
            if (iphase.eq.gas) then
               vel(i,j,k,iphase,iface)=vel(i,j,k,iphase,iface)
     &              +DP*TLAMB(i1,j1,k1,iphase)
            endif
         ELSE
            if (iphase.eq.water) then
               vel(i,j,k,iphase,iface)=DP*TLAMB(i,j,k,iphase)
            endif  
            if (iphase.eq.oil) then
               vel(i,j,k,iphase,iface)=DP*TLAMB(i,j,k,iphase)
               RO = DGRO(i,j,k)
               vel(i,j,k,gas,iface) = RO*vel(i,j,k,oil,iface)
            endif  
            if (iphase.eq.gas) then
               vel(i,j,k,iphase,iface)=vel(i,j,k,iphase,iface)
     &              +DP*TLAMB(i,j,k,iphase)
            endif
         ENDIF
         
 1       continue 

c       write (*,*) i,j,k,iphase,iface, 'vel =', vel(i,j,k,iphase,iface)

      enddo
      enddo
      enddo
      enddo
      enddo
C ----------------------------------------------
C end computation
C ----------------------------------------------

 3    continue

      return
      end

c ====================================================================
      SUBROUTINE IVIS_INIT ()
c --------------------------------------------------------------------
      end


c===========================================================
      SUBROUTINE IVIS_OUTPUT ()
c-----------------------------------------------------------
c      Implicit Real*8(A-H,O-Z)
      IMPLICIT NONE
c-----------------------
c black oil velocity computation routine
c
      EXTERNAL IVELCOMP
$MORTAR      EXTERNAL IBCFLUX_COMP
c -----------------------

$POWER       include 'msjunk.h'

      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'blkary.h'
      INCLUDE 'visual.h'
      INCLUDE 'iarydat.h'
      INCLUDE 'ibaldat.h'
      
      INTEGER I,jwork(30)
      INTEGER n_array

c this array will check for that we do not do too many updates

      LOGICAL iupdate(100)
      EXTERNAL COMPPORV

c -------------------------------------------------------------      
c the value of visfag can be set anywhere, for exmaple in restart
c files
c we set it here as an example
c could be set from istdout and then tecoutput set up repeatedly
c      
      if((visflag.lt.1).or.(visflag.gt.MAXVISFLAG)) then
         go to 1
      endif
c ---------------------- COMPUTATION PART
c update all variables, compute velocities 
c

C ---------------------------------------
C UPDATE all variables using template 2 

      do i=1,100
         iupdate(i) = .false.
      enddo
      
      do i=1, vis_scl
           n_array = n_vis_vars(i,current_model)

$MANY      CALL UPDATE(N_array,2)
           iupdate(n_array) = .true.
      enddo

      if (vis_vec.gt.0) then
$MANY      if(.not.iupdate(n_poil)) CALL UPDATE(N_POIL,2)
$MANY      if(.not.iupdate(n_pwat)) CALL UPDATE(N_PWAT,2)
$MANY      if(.not.iupdate(n_pgas)) CALL UPDATE(N_PGAS,2)

$MANY      if(.not.iupdate(n_tcofx)) CALL UPDATE(N_TCOFX,2)
$MANY      if(.not.iupdate(n_tcofy)) CALL UPDATE(N_TCOFY,2)
$MANY      if(.not.iupdate(n_tcofz)) CALL UPDATE(N_TCOFZ,2)
$MANY      if(.not.iupdate(n_rho)) CALL UPDATE(N_RHO,2)
$MANY      if(.not.iupdate(n_tlamb)) CALL UPDATE(N_TLAMB,2)
$MANY      if(.not.iupdate(n_dgro)) CALL UPDATE(N_DGRO,2)

      JWORK(1)=14
      JWORK(2)=N_TCOFX
      JWORK(3)=N_TCOFY
      JWORK(4)=N_TCOFZ
      JWORK(5)=N_DEPTH
      JWORK(6)=N_POIL
      JWORK(7)=N_PWAT
      JWORK(8)=N_PGAS
      JWORK(9)=N_RHO
      JWORK(10)=N_TLAMB
      JWORK(11)=N_DGRO
      JWORK(12)=N_VEL
      JWORK(13)=N_VMO
      JWORK(14)=N_VMW
      JWORK(15)=N_VMG

      CALL CALLWORK(IVELCOMP, JWORK)
      
$MANY      CALL UPDATE(N_VEL,2)

c-----------------------------------------------------------
c compute velocities in the mortar layer
c
$MORTAR      JWORK(1)=14
$MORTAR      JWORK(2)=N_TCOFX
$MORTAR      JWORK(3)=N_TCOFY
$MORTAR      JWORK(4)=N_TCOFZ
$MORTAR      JWORK(5)=N_DEPTH
$MORTAR      JWORK(6)=N_POIL
$MORTAR      JWORK(7)=N_PWAT
$MORTAR      JWORK(8)=N_PGAS
$MORTAR      JWORK(9)=N_RHO
$MORTAR      JWORK(10)=N_TLAMB 
$MORTAR      JWORK(11)=N_DGRO 
$MORTAR      JWORK(12)=N_VEL
$MORTAR      JWORK(13)=N_BC_TYPE(1)
$MORTAR      JWORK(14)=N_BC_TYPE(2)
$MORTAR      JWORK(15)=N_BC_TYPE(3)

$MORTAR      CALL CALLWORK(IBCFLUX_COMP, JWORK)

      endif

c ----------------------- compute pore volume 
c 
c write(*,*) 'UPDATE ',n_visdum,iupdate(n_visdum),n_por

        if (iupdate(n_visdum)) then

           JWORK(1)=3
           JWORK(2)=n_pwat
           JWORK(3)=n_por
           JWORK(4)=n_visdum
           CALL CALLWORK(COMPPORV,JWORK)

$MANY      CALL UPDATE(N_VISDUM,2)

        endif

c ------------------ VISUALIZATION OUTPUT 

c pass the arguments to the framework  vis routine

C For seismic output
C      call iGassman()
               
      call vis_output()

 1    continue
      return
      end

c --------------------------------------------------------------------


C*********************************************************************
      SUBROUTINE COMPPORV (IDIM,JDIM,KDIM,LDIM,IL1,IL2,
     &                   JL1V,JL2V,KL1,
     &                   KL2,KEYOUT,NBLK,PRES,PORO,POROVIS)
C*********************************************************************
c computes current porosity for needs of vis

C  PORO(I,J,K) = Source array (input, REAL*4)

C  POROVIS(I,J,K) = Target array (output, REAL*8)

C*********************************************************************
      implicit none 
      integer idim,jdim,kdim,ldim,il1,il2,nblk,kl1,kl2
      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)

      REAL*8 PRES(IDIM,JDIM,KDIM)
      REAL*4 PORO(IDIM,JDIM,KDIM)
      REAL*8 POROVIS(IDIM,JDIM,KDIM)

      real*8 dx,dy,dz

      integer kerr,ioff,joff,koff,i,j,k,jl1,jl2
      include 'layout.h'
      include 'ifluid.h'

c ----------------------------------------

      KERR = 0
      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,KERR)

      DO 1 K=KL1,KL2
         JL1=JL1V(K)
         JL2=JL2V(K)
         DO 1 J=JL1,JL2
            DO 1 I=IL1,IL2
               
               if(keyout(i,j,k).eq.1) then

                  DY=DYREC(J+JOFF,NBLK)
                  DX=DXREC(I+IOFF,NBLK)
                  DZ=DZREC(K+KOFF,NBLK)
            

                  POROVIS(I,J,K)=PORO(I,J,K)/(DX*DY*DZ) 
     &                 * (1.D0+ROKCMP*Pres(i,j,k))

c write(*,*) 'PORV ',i,j,k,porovis(i,j,k)

               endif
 1          continue

      END

