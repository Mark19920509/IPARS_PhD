/* PEBJACM.C -- DATA MANAGEMENT ROUTINE FOR BLOCK JACOBI PRECONDITIONER

   XIULI GAI     8/12/01

   NOTES: ERROR NUMBERS 461-500 ARE RESERVED FOR MEMORY MANAGEMENT */

/*DATA*/

#include "memory.h"

#define MAXDDY $MXSUBY
#define MAXDDZ $MXSUBZ
#define MAXDD  $MXSUBD

int nsub;                  /* Number of subdomains*/
int idimdd[MAXDD][MAXBLK]; /* Subdomain array dimension in x direction */
int jdimdd[MAXDD][MAXBLK]; /* Subdomain array dimension in y direction */
int kdimdd[MAXDD][MAXBLK]; /* Subdomain array dimension in z direction */
int ildd1[MAXDD][MAXBLK];  /* Subdomain i index lower limit */
int ildd2[MAXDD][MAXBLK];  /* Subdomain i index upper limit */
int kldd1[MAXDD][MAXBLK];  /* Subdomain k index lower limit */
int kldd2[MAXDD][MAXBLK];  /* Subdomain k index upper limit */
int nbandd[MAXDD][MAXBLK]; /* Sumbomain matrix bandwidth */
int ddelem[MAXDD][MAXBLK]; /* Subdomain grid element number */
PINT4 jldd1[MAXDD][MAXBLK]; /* Pointers of subdomain j index lower limits */
PINT4 jldd2[MAXDD][MAXBLK]; /* Pointers of subdomain j index upper limits */ 
PLOG4 znode[MAXDD][MAXBLK]; /* Pointers of subdomain zero node arrays */

PREAL8 bcofdd[MAXDD][MAXBLK]; /* Pointers of subdomain off-diag coef arrays */
PREAL8 dcofdd[MAXDD][MAXBLK]; /* Pointers of subdomain diag coef arrays */
PINT4  mapdd[MAXDD][MAXBLK];  /* Pointers of subdomain local-global mappings */
PINT4  keydd[MAXDD][MAXBLK];  /* Pointers of subdomain keyout arrays */

PREAL8 dcof2d[MAXBLK];        /* Pointer of diagonal coef array of 2d matrix */
PREAL8 bcof2d[MAXBLK];        /* Pointer of off-diag coef array of 2d matrix */
PINT4  znode2d[MAXBLK];       /* Pointer of zero node array for 2d grid */ 
PINT4  key2d[MAXBLK];         /* Pointer of keyout array for 2d grid */

/* On multiprocessor machines a subdomain belong to the processor 
   that owns its original one */

/* Routine declaration: */

   FORTSUB $UPPERalcdda$USAN(PINT4 nsuby, PINT4 nsubz, PINT4 neqs, PINT4 err);
   FORTSUB $UPPERalcgea2d$USAN(PINT4 neqs,PINT4 err);
   FORTSUB $UPPERddwork$USAN (FORTSUB (*subadd) (), PINT4 d);
   FORTSUB $UPPERddwork2d$USAN (FORTSUB (*subadd) (), PINT4 d);
   FORTSUB $UPPERpealcbea$USAN (PCHAR varynam, PINT4 kind, PINT4 ndim4, 
                                PINT4 arynum,PINT4 nface, PINT4 err);
/*********************************************************************/
FORTSUB $UPPERalcdda$USAN(PINT4 nsuby, PINT4 nsubz, PINT4 neqs,PINT4 err)
{
/***********************************************************************
  Domain decomposition for pcg linear solver:
   -divide domain into the specified number of subdomains
   -build map and keyout
   -allocate grid element arrays for each subdomains   
 
  Input variables:
    nsuby = number of subdomains in y direction (input)
    nsubz = number of subdomains in z direction (input)
    neqs = number of linear solver equations on each grid node
    err = err number step by one (output)   
        = 462 insufficient memmory
        = 471 max number of subdomain exceeds limits
********************************************************************/

   int nb;
   int nd,ndy,ndz,j,k,subn,ny,nz;
   int id,jd,kd,eq,si,sj,sk,nj,nk,nremj,nremk,kg,nm,mm,ne,jl1,jl2,kl1,kl2;
   int il1,il2,jlay1,jlay2,klay1,klay2,jg0,kg0,jg1,kg1,sjg,skg,nm2d,sum;
   int jgdd0[MAXDD],kgdd0[MAXDD];

/* Initialize data */

    nsub=0;
    for(nb=0; nb<numblks; nb++) {
       for(nd=0;nd<MAXDD;nd++) {
           idimdd[nd][nb]=idim[nb];
           jdimdd[nd][nb]=0;
           kdimdd[nd][nb]=0;
           ildd1[nd][nb]=iloc1[nb];
           ildd2[nd][nb]=iloc2[nb]+1;
           jldd1[nd][nb]=NULL;    
           jldd2[nd][nb]=NULL;
           kldd1[nd][nb]=0;         
           kldd2[nd][nb]=0;            
           ddelem[nd][nb]=0;
           nbandd[nd][nb]=0;
           
           bcofdd[nd][nb]=NULL;
           dcofdd[nd][nb]=NULL;
           mapdd[nd][nb]=NULL;
           keydd[nd][nb]=NULL;
           znode[nd][nb]=NULL;
       }
   }    
  
/* divide into subdomains and allocate grid element arrays */

   jlay1=layer[1];
   jlay2=max(1,jlay1);
   klay1=layer[2];
   klay2 = max(1,klay1);
   eq=*neqs;
   ny=*nsuby;
   nz=*nsubz;
   for(nb=0;nb<numblks;nb++) {
      if(myelem[nb]>0) {
          jd=jdim[nb]-jlay1-jlay2;
          kd=kdim[nb]-klay1-klay2;
          if(ny<=0 || ny>jd || nz<=0 || nz>kd) {
             *err=471;
             return;
          }
          ndy=(jd/ny);
          ndz=(kd/nz);
          if(ndy*ny<jd) ndy=ndy+1;
          if(ndz*nz<kd) ndz=ndz+1;
          nsub=ndy*ndz;
          if(ndy>MAXDDY || ndz>MAXDDZ || ndy*ndz>MAXDD) {
             *err=471;
             return;
          }
          jd=jdim[nb]-jlay1-jlay2;
          kd=kdim[nb]-klay1-klay2;
          if(ndy>jd) {
            *err=471;
            return;
          }
          if(ndz>kd) {
             *err=471;
             return;
          }
          nj=jd/ndy;
          nk=kd/ndz;
          for(k=0;k<ndz;k++) {
             for(j=0;j<ndy;j++) {       
                 subn=k*ndy+j;
                 jdimdd[subn][nb]=nj;
                 kdimdd[subn][nb]=nk;
             }
          }
          nremj=jd-nj*ndy;
          for(k=0;k<ndz;k++) {
             for(j=0;j<nremj;j++) {
                subn=k*ndy+j;
                jdimdd[subn][nb]=jdimdd[subn][nb]+1;
             }
          }

          nremk=kd-nk*ndz;
          for(k=0;k<nremk;k++) {
             for(j=0;j<ndy;j++) {
                subn=k*ndy+j;
                kdimdd[subn][nb]=kdimdd[subn][nb]+1;
             }
          }

          for(k=0;k<ndz;k++) {
             for(j=0;j<ndy;j++) {
                subn=k*ndy+j;
                if(j==0) jdimdd[subn][nb]=jdimdd[subn][nb]+jlay1;
                if(j==ndy-1) jdimdd[subn][nb]=jdimdd[subn][nb]+jlay2;
                if(k==0) kdimdd[subn][nb]=kdimdd[subn][nb]+klay1;
                if(k==ndz-1) kdimdd[subn][nb]=kdimdd[subn][nb]+klay2;
                
             }
          }
  
          kg0=1;
          for(k=0;k<ndz;k++) {
             jg0=1;
             for(j=0;j<ndy;j++) {
                subn=k*ndy+j;
                jgdd0[subn]=jg0;
                kgdd0[subn]=kg0;
                jg0=jg0+jdimdd[subn][nb];
             }
             kg0=kg0+kdimdd[subn][nb];  
          }

                
/* Allocate grid element array */
          
          eq=*neqs;
          *err=462;
          for(nd=0;nd<ndy*ndz;nd++) {
             id=idimdd[nd][nb];
             jd=jdimdd[nd][nb];
             kd=kdimdd[nd][nb]; 
             nbandd[nd][nb]=jd*id+id+1;
             ne=id*jd*kd;
             nm=ne*nbandd[nd][nb]*eq*eq;
             if((bcofdd[nd][nb]=(PREAL8)malloc(nm*sizeof(double)))==NULL)
                return;
             for(kg=0;kg<nm;kg++) *(bcofdd[nd][nb]+kg)=0.0;

             nm=ne*eq*(eq+1)/2;
             if((dcofdd[nd][nb]=(PREAL8)malloc(nm*sizeof(double)))==NULL)
                return;
             for(kg=0;kg<nm;kg++) *(dcofdd[nd][nb]+kg)=0.0;

             nm=ne;
             if((keydd[nd][nb]=(PINT4)malloc(nm*sizeof(int)))==NULL)
                return;
             for(kg=0;kg<nm;kg++) *(keydd[nd][nb]+kg)=0;

             if((znode[nd][nb]=(PLOG4)malloc(nm*sizeof(int)))==NULL)
                return;
             for(kg=0;kg<nm;kg++) *(znode[nd][nb]+kg)=0;
             
             nm=jd*kd;
             if((mapdd[nd][nb]=(PINT4)malloc(nm*sizeof(int)))==NULL)
                return;
             for(kg=0;kg<nm;kg++) *(mapdd[nd][nb]+kg)=0;

             nm=kd;
             if((jldd1[nd][nb]=(PINT4)malloc(nm*sizeof(int)))==NULL)
                return;
             for(kg=0;kg<nm;kg++) *(jldd1[nd][nb]+kg)=0;
           
             if((jldd2[nd][nb]=(PINT4)malloc(nm*sizeof(int)))==NULL)
                return;
             for(kg=0;kg<nm;kg++) *(jldd2[nd][nb]+kg)=0;                   
          }

/* Calculate mapdd (mapping from 2d index to 3d index) */

          id=idim[nb];
          jd=jdim[nb];
          kd=kdim[nb];
          ne=id*jd*kd;

          for(nd=0;nd<ndy*ndz;nd++) {
             jg0=jgdd0[nd];
             kg0=kgdd0[nd];
             nm2d=0;
             nm=0;
             for(sk=0,skg=kg0;sk<kdimdd[nd][nb];sk++,skg++) {
                for(sj=0,sjg=jg0;sj<jdimdd[nd][nb]; 
                   sj++,sjg++) {
                     ne=(skg-1)*id*jd+(sjg-1)*id+1;
                   *(mapdd[nd][nb]+nm2d)=ne;
                   for(si=0;si<idimdd[nd][nb];si++) {
                      *(keydd[nd][nb]+nm)=*(keyout[nb]+ne-1);
                      ne++;
                      nm++;
                   }
                   nm2d++;
                }
             }
          }
/*
          for(nd=0L;nd<ndy*ndz;nd++) {
             id=idimdd[nd][nb];
             jd=jdimdd[nd][nb]; 
             kd=kdimdd[nd][nb];
             sj=jd-1L;
             for(sk=0L;sk<kd;sk++) {
                nm=sk*jd*id+sj*id;
                mm=sk*jd*id+(sj-1L)*id;
                for(si=0L;si<id;si++) {
                   *(keydd[nd][nb]+nm)=*(keydd[nd][nb]+mm);
                   nm++;
                   mm++;
                }
             }
             sk=kd-1L;
             for(sj=0L;sj<jd;sj++) {
                nm=sk*jd*id+sj*id;
                mm=(sk-1L)*jd*id+sj*id;
                for(si=0L;si<id;si++) {
                   *(keydd[nd][nb]+nm)=*(keydd[nd][nb]+mm);
                   nm++;
                   mm++;
                }
             }
          }
*/ 
          
          for(k=0;k<ndz;k++) {
             for(j=0;j<ndy;j++) {
                subn=k*ndy+j;
                id=idimdd[subn][nb];
                jd=jdimdd[subn][nb];
                kd=kdimdd[subn][nb];
                jg0=jgdd0[subn];
                kg0=kgdd0[subn];
                jg1=jg0+jd-1;

                if(k==0)
                   kl1=kloc1[nb];
                else
                   kl1=1;
                if(k==ndz-1)
                   kl2=(kloc2[nb]-kg0+1)+1;
                else
                   kl2=kd;

                kldd1[subn][nb]=kl1;
                kldd2[subn][nb]=kl2;
                for(sk=kl1-1;sk<=kl2-1;sk++) {
                   skg=kg0+sk-1;
                   jl1=*(jloc1[nb]+skg);
                   jl2=*(jloc2[nb]+skg);
                   if(jl1<jg0) *(jldd1[subn][nb]+sk)=1;
                   if(jl1>=jg0) *(jldd1[subn][nb]+sk)=jl1-jg0+1;
                   if(jl2>=jg1) *(jldd2[subn][nb]+sk)=jd;
                   if(jl2<jg1) *(jldd2[subn][nb]+sk)=(jl2-jg0+1)+1;
                   if(jl1>jg1) {
                      *(jldd1[subn][nb]+sk)=0;
                      *(jldd2[subn][nb]+sk)=0;
                   }
                   if(jl2<jg0) {
                      *(jldd1[subn][nb]+sk)=0;
                      *(jldd2[subn][nb]+sk)=0;
                   }
                }
             }  
          }

   
/* calculate the number of elements in each subdomain */
          
          for(nd=0;nd<ndy*ndz;nd++) {
              id=idimdd[nd][nb];
              jd=jdimdd[nd][nb];
              kd=kdimdd[nd][nb];
              kl1=kldd1[nd][nb]-1;
              kl2=kldd2[nd][nb]-1;
              il1=ildd1[nd][nb]-1;
              il2=ildd2[nd][nb]-1;
              sum=0;
              for(sk=kl1;sk<=kl2;sk++) {
                 jl1=*(jldd1[nd][nb]+sk)-1;
                 jl2=*(jldd2[nd][nb]+sk)-1;
                 for(sj=jl1;sj<=jl2;sj++) {
                    for(si=il1;si<=il2;si++) {
                       nm=sk*jd*id+sj*id+si;
                       if(*(keydd[nd][nb]+nm)>0) sum++;
                    }
                 }
              }
              ddelem[nd][nb]=sum;
          }  

      }      
   }  
   *err=0;
   return;
}

/********************************************************************/
FORTSUB $UPPERalcgea2d$USAN(PINT4 neqs,PINT4 err)
{
/*********************************************************************
 2D aggregation data management routine           
   -allocate grid element arrays for 2D grid

 Input variables:
   neqa = number of linear solver equations on each grid node
   err = err number step by one (output)
       = 462 insufficient memmory
       = 471 max number of subdomain exceeds limits

********************************************************************/
   int nb,nband2d,nm,ne,eq,kg,jlay1,jlay2,klay1,klay2;

   for(nb=0; nb<numblks; nb++) {
       bcof2d[nb]=NULL;
       dcof2d[nb]=NULL;
       key2d[nb]=NULL;
       znode2d[nb]=NULL;
   }

   jlay1=layer[1];
   jlay2=max(1,jlay1);
   klay1=layer[2];
   klay2 = max(1,klay1);
   eq=*neqs;
   for(nb=0;nb<numblks;nb++) {
      if(myelem[nb]>0) {
         ne=jdim[nb]*kdim[nb];
         nband2d=jdim[nb]+1;

         nm=eq*(eq+1)/2*ne;
         if((dcof2d[nb]=(PREAL8)malloc(nm*sizeof(double)))==NULL)
            return;
         for(kg=0;kg<nm;kg++) *(dcof2d[nb]+kg)=0.0;

         nm=eq*eq*nband2d*ne;      
         if((bcof2d[nb]=(PREAL8)malloc(nm*sizeof(double)))==NULL)
            return;
         for(kg=0;kg<nm;kg++) *(bcof2d[nb]+kg)=0.0;

         nm=ne;     
         if((key2d[nb]=(PINT4)malloc(nm*sizeof(int)))==NULL)
            return;
         for(kg=0;kg<nm;kg++) *(key2d[nb]+kg)=0;

         if((znode2d[nb]=(PINT4)malloc(nm*sizeof(int)))==NULL)
            return;
         for(kg=0;kg<nm;kg++) *(znode2d[nb]+kg)=0;
      }
   }  
   *err=0;
   return;
}

/*********************************************************************/
FORTSUB $UPPERddwork$USAN (FORTSUB (*subadd) (), PINT4 d)
{
/*******************************************************************

 Calls a work routine for all grid block in a subdomain for which a 
 a processor has grid elements.
   - subadd = name of the work routine (input)
   - d[ ] = work routine data vector (input)
   - d[0] = number of arguments after the fixed standard arguments (input)
 
 Work routine arguments:

   IDIM,JDIM,KDIM = Local grid element dimensions of a 3d array.

   LDIM = The first dimension of grid-refinement arrays 

   IL1,IL2 = The smallest and largest local 3d I indexes for which the work
              routine is responsible 

   JL1V(K),JL2V(K) = the smallest and largest local 3d J indexes for which
              the work routine is responsible in row K. 

   KL1, KL2 = The smallest and largest local 3d K indexes for which the work
              routine is responsible 

   KEYOUT(I,J,K) = A 3d array defining element type.  Local indexes are
              used as subscripts for KEYOUT. 
              0  ==> The grid element does not exist. It may be outside
                     the boundary of the reservoir or may represent a shale.
              1  ==> The grid element exists and belongs to the current
                     processor. The element is not refined.
             -1  ==> The grid element exists but belongs to a neighboring
                     processor. The element is not refined.

   NBLK = Grid-block number 

   NSUB = SUBDOMAIN NUMBER

   IDIMDD,JDIMDD,KDIMDD = Local grid element dimensions of a 3d array
                          in a subdomain

   ILDDI,ILDD2 = The smallest and largest local 3d I indexes in a subdomain
                 for which a ddwork routine is responsible

   JLDD1(K),JLDD2(K) = The smallest and largest local 3d J indexes in a 
                       subdomain for which a ddwork routine is responsible
 
   KLDDI,KLDD2 = The smallest and largest local 3d K indexes in a subdomain
                 for which a ddwork routine is responsible
 
   NBANDD = Bandwidth of a local subdomain matrix
  
   MAPDD(J,K) = Local to global index mapping for subdomain grid elements
 
   KEYDD(I,J,K) = Keyout values for subdomain corner points
 
   ZNODD(I,J,K) = Indicator of no elastic calculation on a subdomain node
 
   BCOFDD(L,M,I,J,K) = Off diagonal coef. of a local subdomain matrix
 
   DCOFDD(L,I,J,K) = Diagonal coef. of a local subdomain matrix
*******************************************************************/
 int narg,nb,nd;
 int nbp,ndp;
 void **a;
 narg=d[0]+28;

 for(nb=0;nb<numblks;nb++) {

   if((CurrentModel == 0 || CurrentModel == blkmodel_c[nb])
    && (myelem[nb] > 0 || allblk==0)) {

      nbp=nb+1;
      a=&(aryadd[nb][0]);
      for(nd=0;nd<nsub;nd++) {
         if(ddelem[nd][nb]>0) {
          ndp = nd + 1;
          switch(narg) {
 
          case 28:
             (*subadd) (&(idim[nb]),&(jdim[nb]),&(kdim[nb]),&dimr,
              &(iloc1[nb]),&(iloc2[nb]),jloc1[nb],jloc2[nb],
              &(kloc1[nb]),&(kloc2[nb]),keyout[nb],&nbp,&ndp,
              &(idimdd[nd][nb]),&(jdimdd[nd][nb]),&(kdimdd[nd][nb]),
              &(ildd1[nd][nb]),&(ildd2[nd][nb]),jldd1[nd][nb],jldd2[nd][nb],
              &(kldd1[nd][nb]),&(kldd2[nd][nb]),&(nbandd[nd][nb]),
              mapdd[nd][nb],keydd[nd][nb],znode[nd][nb],bcofdd[nd][nb],
              dcofdd[nd][nb]);
              break;
 
          case 29:
             (*subadd) (&(idim[nb]),&(jdim[nb]),&(kdim[nb]),&dimr,
              &(iloc1[nb]),&(iloc2[nb]),jloc1[nb],jloc2[nb],
              &(kloc1[nb]),&(kloc2[nb]),keyout[nb],&nbp,&ndp,
              &(idimdd[nd][nb]),&(jdimdd[nd][nb]),&(kdimdd[nd][nb]),
              &(ildd1[nd][nb]),&(ildd2[nd][nb]),jldd1[nd][nb],jldd2[nd][nb],
              &(kldd1[nd][nb]),&(kldd2[nd][nb]),&(nbandd[nd][nb]),
              mapdd[nd][nb],keydd[nd][nb],znode[nd][nb],bcofdd[nd][nb],
              dcofdd[nd][nb],*(a+d[1]));
              break;

          case 30:
             (*subadd) (&(idim[nb]),&(jdim[nb]),&(kdim[nb]),&dimr,
              &(iloc1[nb]),&(iloc2[nb]),jloc1[nb],jloc2[nb],
              &(kloc1[nb]),&(kloc2[nb]),keyout[nb],&nbp,&ndp,
              &(idimdd[nd][nb]),&(jdimdd[nd][nb]),&(kdimdd[nd][nb]),
              &(ildd1[nd][nb]),&(ildd2[nd][nb]),jldd1[nd][nb],jldd2[nd][nb],
              &(kldd1[nd][nb]),&(kldd2[nd][nb]),&(nbandd[nd][nb]),
              mapdd[nd][nb],keydd[nd][nb],znode[nd][nb],bcofdd[nd][nb],
              dcofdd[nd][nb],*(a+d[1]),*(a+d[2]));
              break;

          case 31:
             (*subadd) (&(idim[nb]),&(jdim[nb]),&(kdim[nb]),&dimr,
              &(iloc1[nb]),&(iloc2[nb]),jloc1[nb],jloc2[nb],
              &(kloc1[nb]),&(kloc2[nb]),keyout[nb],&nbp,&ndp,
              &(idimdd[nd][nb]),&(jdimdd[nd][nb]),&(kdimdd[nd][nb]),
              &(ildd1[nd][nb]),&(ildd2[nd][nb]),jldd1[nd][nb],jldd2[nd][nb],
              &(kldd1[nd][nb]),&(kldd2[nd][nb]),&(nbandd[nd][nb]),
              mapdd[nd][nb],keydd[nd][nb],znode[nd][nb],bcofdd[nd][nb],
              dcofdd[nd][nb],*(a+d[1]),*(a+d[2]),*(a+d[3]));
              break;
 
          case 32:
             (*subadd) (&(idim[nb]),&(jdim[nb]),&(kdim[nb]),&dimr,
              &(iloc1[nb]),&(iloc2[nb]),jloc1[nb],jloc2[nb],
              &(kloc1[nb]),&(kloc2[nb]),keyout[nb],&nbp,&ndp,
              &(idimdd[nd][nb]),&(jdimdd[nd][nb]),&(kdimdd[nd][nb]),
              &(ildd1[nd][nb]),&(ildd2[nd][nb]),jldd1[nd][nb],jldd2[nd][nb],
              &(kldd1[nd][nb]),&(kldd2[nd][nb]),&(nbandd[nd][nb]),
              mapdd[nd][nb],keydd[nd][nb],znode[nd][nb],bcofdd[nd][nb],
              dcofdd[nd][nb],*(a+d[1]),*(a+d[2]),*(a+d[3]),*(a+d[4]));
              break;

          case 33:
             (*subadd) (&(idim[nb]),&(jdim[nb]),&(kdim[nb]),&dimr,
              &(iloc1[nb]),&(iloc2[nb]),jloc1[nb],jloc2[nb],
              &(kloc1[nb]),&(kloc2[nb]),keyout[nb],&nbp,&ndp,
              &(idimdd[nd][nb]),&(jdimdd[nd][nb]),&(kdimdd[nd][nb]),
              &(ildd1[nd][nb]),&(ildd2[nd][nb]),jldd1[nd][nb],jldd2[nd][nb],
              &(kldd1[nd][nb]),&(kldd2[nd][nb]),&(nbandd[nd][nb]),
              mapdd[nd][nb],keydd[nd][nb],znode[nd][nb],bcofdd[nd][nb],
              dcofdd[nd][nb],*(a+d[1]),*(a+d[2]),*(a+d[3]),*(a+d[4]),
              *(a+d[5]));
              break;

          case 34:
             (*subadd) (&(idim[nb]),&(jdim[nb]),&(kdim[nb]),&dimr,
              &(iloc1[nb]),&(iloc2[nb]),jloc1[nb],jloc2[nb],
              &(kloc1[nb]),&(kloc2[nb]),keyout[nb],&nbp,&ndp,
              &(idimdd[nd][nb]),&(jdimdd[nd][nb]),&(kdimdd[nd][nb]),
              &(ildd1[nd][nb]),&(ildd2[nd][nb]),jldd1[nd][nb],jldd2[nd][nb],
              &(kldd1[nd][nb]),&(kldd2[nd][nb]),&(nbandd[nd][nb]),
              mapdd[nd][nb],keydd[nd][nb],znode[nd][nb],bcofdd[nd][nb],
              dcofdd[nd][nb],*(a+d[1]),*(a+d[2]),*(a+d[3]),*(a+d[4]),
              *(a+d[5]),*(a+d[6]));
              break;

          case 35:
             (*subadd) (&(idim[nb]),&(jdim[nb]),&(kdim[nb]),&dimr,
              &(iloc1[nb]),&(iloc2[nb]),jloc1[nb],jloc2[nb],
              &(kloc1[nb]),&(kloc2[nb]),keyout[nb],&nbp,&ndp,
              &(idimdd[nd][nb]),&(jdimdd[nd][nb]),&(kdimdd[nd][nb]),
              &(ildd1[nd][nb]),&(ildd2[nd][nb]),jldd1[nd][nb],jldd2[nd][nb],
              &(kldd1[nd][nb]),&(kldd2[nd][nb]),&(nbandd[nd][nb]),
              mapdd[nd][nb],keydd[nd][nb],znode[nd][nb],bcofdd[nd][nb],
              dcofdd[nd][nb],*(a+d[1]),*(a+d[2]),*(a+d[3]),*(a+d[4]),
              *(a+d[5]),*(a+d[6]),*(a+d[7]));
              break;

          default:
              break;
        }
      }
    } 
   }
 }
}

/*********************************************************************/
FORTSUB $UPPERddwork2d$USAN (FORTSUB (*subadd) (), PINT4 d)
{
/*******************************************************************
  Calls a work routine for all grid block in a subdomain for which a
  a processor has grid elements.
    - subadd = name of the work routine (input)
    - d[ ] = work routine data vector (input)
    - d[0] = number of arguments after the fixed standard arguments (input)

  Arguments in a ddwork2d routine:

   IDIM,JDIM,KDIM = Local grid element dimensions of a 3d array.

   LDIM = The first dimension of grid-refinement arrays

   IL1,IL2 = The smallest and largest local 3d I indexes for which the work
              routine is responsible

   JL1V(K),JL2V(K) = the smallest and largest local 3d J indexes for which
              the work routine is responsible in row K.

   KL1, KL2 = The smallest and largest local 3d K indexes for which the work
              routine is responsible

   KEYOUT(I,J,K) = A 3d array defining element type.  Local indexes are
              used as subscripts for KEYOUT.
              0  ==> The grid element does not exist. It may be outside
                     the boundary of the reservoir or may represent a shale.
              1  ==> The grid element exists and belongs to the current
                     processor. The element is not refined.
             -1  ==> The grid element exists but belongs to a neighboring
                     processor. The element is not refined.

   NBLK = Grid-block number

   NBAND2D = Bandwidth of a 2d matrix

   KEY2D(J,K) = Keyout values for 2d corner points

   ZNOD2D(J,K) = Indicator of no elastic calculation on a 2d grid node

   BCOF2D(L,M,J,K) = Off diagonal coefficients of a 2d matrix
 
   DCOF2D(L,J,K) = Diagonal coefficients of a 2d matrix
********************************************************************/
 int narg,nb,nband2d;
 int nbp;
 void **a;
 narg=d[0]+17;
 for(nb=0;nb<numblks;nb++) {
   if((CurrentModel == 0 || CurrentModel == blkmodel_c[nb])
    && (myelem[nb] > 0 || allblk==0)) {

       nbp=nb+1;
       nband2d=jdim[nb]+1;
       a=&(aryadd[nb][0]);
 
       switch(narg) {

          case 17:
             (*subadd) (&(idim[nb]),&(jdim[nb]),&(kdim[nb]),&dimr,
              &(iloc1[nb]),&(iloc2[nb]),jloc1[nb],jloc2[nb],
              &(kloc1[nb]),&(kloc2[nb]),keyout[nb],&nbp,
              &(nband2d),key2d[nb],znode2d[nb],bcof2d[nb],dcof2d[nb]);
              break;

          case 18:
             (*subadd) (&(idim[nb]),&(jdim[nb]),&(kdim[nb]),&dimr,
              &(iloc1[nb]),&(iloc2[nb]),jloc1[nb],jloc2[nb],
              &(kloc1[nb]),&(kloc2[nb]),keyout[nb],&nbp,
              &(nband2d),key2d[nb],znode2d[nb],bcof2d[nb],dcof2d[nb],
              *(a+d[1]));
              break;

          case 19:
             (*subadd) (&(idim[nb]),&(jdim[nb]),&(kdim[nb]),&dimr,
              &(iloc1[nb]),&(iloc2[nb]),jloc1[nb],jloc2[nb],
              &(kloc1[nb]),&(kloc2[nb]),keyout[nb],&nbp,
              &(nband2d),key2d[nb],znode2d[nb],bcof2d[nb],dcof2d[nb],
              *(a+d[1]),*(a+d[2]));
              break;

          case 20:
             (*subadd) (&(idim[nb]),&(jdim[nb]),&(kdim[nb]),&dimr,
              &(iloc1[nb]),&(iloc2[nb]),jloc1[nb],jloc2[nb],
              &(kloc1[nb]),&(kloc2[nb]),keyout[nb],&nbp,
              &(nband2d),key2d[nb],znode2d[nb],bcof2d[nb],dcof2d[nb],
              *(a+d[1]),*(a+d[2]),*(a+d[3]));
              break;

          case 21:
             (*subadd) (&(idim[nb]),&(jdim[nb]),&(kdim[nb]),&dimr,
              &(iloc1[nb]),&(iloc2[nb]),jloc1[nb],jloc2[nb],
              &(kloc1[nb]),&(kloc2[nb]),keyout[nb],&nbp,
              &(nband2d),key2d[nb],znode2d[nb],bcof2d[nb],dcof2d[nb],
              *(a+d[1]),*(a+d[2]),*(a+d[3]),*(a+d[4]));
              break;

          case 22:
             (*subadd) (&(idim[nb]),&(jdim[nb]),&(kdim[nb]),&dimr,
              &(iloc1[nb]),&(iloc2[nb]),jloc1[nb],jloc2[nb],
              &(kloc1[nb]),&(kloc2[nb]),keyout[nb],&nbp,
              &(nband2d),key2d[nb],znode2d[nb],bcof2d[nb],dcof2d[nb],
              *(a+d[1]),*(a+d[2]),*(a+d[3]),*(a+d[4]),*(a+d[5]));
              break;

          case 23:
             (*subadd) (&(idim[nb]),&(jdim[nb]),&(kdim[nb]),&dimr,
              &(iloc1[nb]),&(iloc2[nb]),jloc1[nb],jloc2[nb],
              &(kloc1[nb]),&(kloc2[nb]),keyout[nb],&nbp,
              &(nband2d),key2d[nb],znode2d[nb],bcof2d[nb],dcof2d[nb],
              *(a+d[1]),*(a+d[2]),*(a+d[3]),*(a+d[4]),*(a+d[5]),
              *(a+d[6]));
              break;

          default:
              break;
       }
            
   }
 }
}
 
