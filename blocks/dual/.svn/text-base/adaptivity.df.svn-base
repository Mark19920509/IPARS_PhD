!*********************************************************************
! adaptivity.df: subroutines for grid adaptivity
!*********************************************************************
! Created by Ben Ganis
! 2/28/17

C*********************************************************************
      MODULE adaptmod
C*********************************************************************
      IMPLICIT NONE
      SAVE
      INTEGER :: NLEVA        ! Number of refinement levels
      INTEGER :: NDIMA = 3    ! Number of space dimensions
      INTEGER :: IDIM_F,JDIM_F,KDIM_F
      INTEGER, ALLOCATABLE :: FINELEV(:,:,:)
      REAL*8, ALLOCATABLE :: FINEARR(:,:,:)
      END

C*********************************************************************
      SUBROUTINE GETFINEDIM(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &     KL2,KEYOUT,NBLK)
C*********************************************************************
      USE adaptmod
      IMPLICIT NONE
      INCLUDE 'layout.h'
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
      INTEGER IERR
      IF (NBLK.EQ.NUMBLK) THEN
        IDIM_F=IDIM-ILAY
        JDIM_F=JDIM-JLAY
        KDIM_F=KDIM-KLAY
      ENDIF
      END

C*********************************************************************
      SUBROUTINE ADAPTIVITY_SAVE_LEVEL(IERR)
C*********************************************************************
      USE adaptmod
      IMPLICIT NONE
      INTEGER IERR
      EXTERNAL SAVE_LEVEL
      FINELEV(:,:,:)=0
      CALL CALLWORK(SAVE_LEVEL,0)
      END SUBROUTINE ADAPTIVITY_SAVE_LEVEL

C*********************************************************************
      SUBROUTINE SAVE_LEVEL(IDIM,JDIM,KDIM,LDIM,IL1,IL2,
     &     JL1V,JL2V,KL1,KL2,KEYOUT,NBLK)
C*********************************************************************
      USE adaptmod
      IMPLICIT NONE
      INCLUDE 'layout.h'
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
      INTEGER I,J,K,IFINE,JFINE,KFINE,STRIDE

      STRIDE=2**(NLEVA-NBLK)
      DO K = KL1,KL2
      KFINE=(K-KLAY-1)*STRIDE + 1
      DO J = JL1V(K),JL2V(K)
      JFINE=(J-JLAY-1)*STRIDE + 1
      DO I = IL1,IL2
      IFINE=(I-ILAY-1)*STRIDE + 1
      IF (KEYOUT(I,J,K).EQ.1) THEN
        FINELEV(IFINE,JFINE,KFINE)=NBLK
      ENDIF
      ENDDO
      ENDDO
      ENDDO

      END SUBROUTINE SAVE_LEVEL

C*********************************************************************
      SUBROUTINE SAVE_ARRAY(IDIM,JDIM,KDIM,LDIM,IL1,IL2,
     &     JL1V,JL2V,KL1,KL2,KEYOUT,NBLK,ARRAY)
C*********************************************************************
      USE adaptmod
      IMPLICIT NONE
      INCLUDE 'layout.h'
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 ARRAY(IDIM,JDIM,KDIM)
      INTEGER I,J,K,IFINE,JFINE,KFINE,STRIDE

      STRIDE=2**(NLEVA-NBLK)
      DO K = KL1,KL2
      KFINE=(K-KLAY-1)*STRIDE + 1
      DO J = JL1V(K),JL2V(K)
      JFINE=(J-JLAY-1)*STRIDE + 1
      DO I = IL1,IL2
      IFINE=(I-ILAY-1)*STRIDE + 1
      IF (FINELEV(IFINE,JFINE,KFINE).EQ.NBLK) THEN
        FINEARR(IFINE,JFINE,KFINE)=ARRAY(I,J,K)
!        WRITE(*,'(a,4i4,a,f11.4,a,3i4)')
!     &    'SAVE_ARRAY: I,J,K,NBLK=',I,J,K,NBLK,
!     &    ', FARR=',FINEARR(IFINE,JFINE,KFINE),
!     &    ', IFINE,JFINE,KFINE=',IFINE,JFINE,KFINE
      ENDIF
      ENDDO
      ENDDO
      ENDDO

      END SUBROUTINE SAVE_ARRAY

C*********************************************************************
      SUBROUTINE UPSCALE_ARRAY(IDIM,JDIM,KDIM,LDIM,IL1,IL2,
     &     JL1V,JL2V,KL1,KL2,KEYOUT,NBLK,ARRAY)
C*********************************************************************
      USE adaptmod
      IMPLICIT NONE
      INCLUDE 'layout.h'
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 ARRAY(IDIM,JDIM,KDIM)
      INTEGER I,J,K,IFINE,JFINE,KFINE,STRIDE,I2,J2,K2,S2,LEV,IMAX
      REAL*8 WEIGHT,WSUM,AVG

      STRIDE=2**(NLEVA-NBLK)
      DO K = KL1,KL2
      KFINE=(K-KLAY-1)*STRIDE + 1
      DO J = JL1V(K),JL2V(K)
      JFINE=(J-JLAY-1)*STRIDE + 1
      DO I = IL1,IL2
      IFINE=(I-ILAY-1)*STRIDE + 1
      IF (KEYOUT(I,J,K).EQ.1) THEN
        LEV=FINELEV(IFINE,JFINE,KFINE)
        IF (NBLK.EQ.LEV) THEN
          ! No upscaling necessary
        ELSEIF (NBLK.LT.LEV) THEN
          ! Upscaling case
          WRITE(*,'(a,5i4)')'Up: IFINE,JFINE,KFINE,NBLK<LEV=',
     &      IFINE,JFINE,KFINE,NBLK,LEV
          AVG=0.D0
          WSUM=0.D0
          IF (NDIMA.EQ.3) THEN
            IMAX=(I-ILAY)*STRIDE
          ELSE
            IMAX=IFINE
          ENDIF
          DO K2=KFINE,(K-KLAY)*STRIDE
          DO J2=JFINE,(J-JLAY)*STRIDE
          DO I2=IFINE,IMAX
            LEV=FINELEV(I2,J2,K2)
            IF (LEV.NE.0) THEN
              WEIGHT=2.D0**(NDIMA*(NBLK-LEV))
              WSUM=WSUM+WEIGHT
              AVG=AVG+WEIGHT*FINEARR(I2,J2,K2)
              WRITE(*,'(a,4i4,2e11.4)')'I2,J2,K2,LEV,FARR,W=',
     &          I2,J2,K2,LEV,FINEARR(I2,J2,K2),WEIGHT
            ENDIF
          ENDDO
          ENDDO
          ENDDO
          WRITE(*,*)'AVG,WSUM=',AVG,WSUM
          IF (ABS(WSUM-1.D0).GT.1.D-10) THEN
            CALL KILL_IPARS('error: upscaling failed, wsum not 1')
          ENDIF
          ARRAY(I,J,K)=AVG
        ELSE
          ! Downscaling case
          WRITE(*,'(a,5i4)')'Down: IFINE,JFINE,KFINE,NBLK>LEV=',
     &      IFINE,JFINE,KFINE,NBLK,LEV
          K2=KFINE
          J2=JFINE
          I2=IFINE
          DO LEV=NBLK-1,1,-1
            S2=2**(NLEVA-LEV)
            K2=K2-(MOD(K2-1,S2))
            J2=J2-(MOD(J2-1,S2))
            IF (NDIMA.EQ.3) THEN
              I2=I2-(MOD(I2-1,S2))
            ENDIF
            WRITE(*,'(a,5i4,2e11.4)')'I2,J2,K2,S2,LEV,FLEV,FARR=',
     &        I2,J2,K2,S2,LEV,FINELEV(I2,J2,K2),FINEARR(I2,J2,K2)
            IF (FINELEV(I2,J2,K2).EQ.LEV) THEN
              ARRAY(I,J,K)=FINEARR(I2,J2,K2)
              GOTO 10
            ENDIF
          ENDDO
          CALL KILL_IPARS('error: downscaling failed')
        ENDIF
 10   ENDIF
      ENDDO
      ENDDO
      ENDDO

      END SUBROUTINE UPSCALE_ARRAY
